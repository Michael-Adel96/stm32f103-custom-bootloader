
App_1 project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080096cc  080096cc  000096cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f8  080096f8  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  080096f8  080096f8  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096f8  080096f8  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096f8  080096f8  000096f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096fc  080096fc  000096fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009700  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800970c  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800970c  000100c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000703c  00000000  00000000  00010035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001761  00000000  00000000  00017071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  000187d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  00018e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001647a  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008af7  00000000  00000000  0002f91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e4b3  00000000  00000000  00038411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b68c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e4  00000000  00000000  000b6914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	2000000c 	.word	0x2000000c
 8008128:	00000000 	.word	0x00000000
 800812c:	080096b4 	.word	0x080096b4

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000010 	.word	0x20000010
 8008148:	080096b4 	.word	0x080096b4

0800814c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <MX_CRC_Init+0x20>)
 8008152:	4a07      	ldr	r2, [pc, #28]	; (8008170 <MX_CRC_Init+0x24>)
 8008154:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <MX_CRC_Init+0x20>)
 8008158:	f000 fbb7 	bl	80088ca <HAL_CRC_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008162:	f000 f8e0 	bl	8008326 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000028 	.word	0x20000028
 8008170:	40023000 	.word	0x40023000

08008174 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a09      	ldr	r2, [pc, #36]	; (80081a8 <HAL_CRC_MspInit+0x34>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d10b      	bne.n	800819e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <HAL_CRC_MspInit+0x38>)
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4a08      	ldr	r2, [pc, #32]	; (80081ac <HAL_CRC_MspInit+0x38>)
 800818c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008190:	6153      	str	r3, [r2, #20]
 8008192:	4b06      	ldr	r3, [pc, #24]	; (80081ac <HAL_CRC_MspInit+0x38>)
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr
 80081a8:	40023000 	.word	0x40023000
 80081ac:	40021000 	.word	0x40021000

080081b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	609a      	str	r2, [r3, #8]
 80081c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081c4:	4b27      	ldr	r3, [pc, #156]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4a26      	ldr	r2, [pc, #152]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081ca:	f043 0320 	orr.w	r3, r3, #32
 80081ce:	6193      	str	r3, [r2, #24]
 80081d0:	4b24      	ldr	r3, [pc, #144]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081dc:	4b21      	ldr	r3, [pc, #132]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081e2:	f043 0304 	orr.w	r3, r3, #4
 80081e6:	6193      	str	r3, [r2, #24]
 80081e8:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081f4:	4b1b      	ldr	r3, [pc, #108]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <MX_GPIO_Init+0xb4>)
 80081fa:	f043 0308 	orr.w	r3, r3, #8
 80081fe:	6193      	str	r3, [r2, #24]
 8008200:	4b18      	ldr	r3, [pc, #96]	; (8008264 <MX_GPIO_Init+0xb4>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	607b      	str	r3, [r7, #4]
 800820a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800820c:	2200      	movs	r2, #0
 800820e:	2102      	movs	r1, #2
 8008210:	4815      	ldr	r0, [pc, #84]	; (8008268 <MX_GPIO_Init+0xb8>)
 8008212:	f000 fcfb 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008216:	2301      	movs	r3, #1
 8008218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <MX_GPIO_Init+0xbc>)
 800821c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800821e:	2301      	movs	r3, #1
 8008220:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008222:	f107 0310 	add.w	r3, r7, #16
 8008226:	4619      	mov	r1, r3
 8008228:	480f      	ldr	r0, [pc, #60]	; (8008268 <MX_GPIO_Init+0xb8>)
 800822a:	f000 fb6b 	bl	8008904 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800822e:	2302      	movs	r3, #2
 8008230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800823a:	2302      	movs	r3, #2
 800823c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823e:	f107 0310 	add.w	r3, r7, #16
 8008242:	4619      	mov	r1, r3
 8008244:	4808      	ldr	r0, [pc, #32]	; (8008268 <MX_GPIO_Init+0xb8>)
 8008246:	f000 fb5d 	bl	8008904 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800824a:	2200      	movs	r2, #0
 800824c:	2100      	movs	r1, #0
 800824e:	2006      	movs	r0, #6
 8008250:	f000 fb05 	bl	800885e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008254:	2006      	movs	r0, #6
 8008256:	f000 fb1e 	bl	8008896 <HAL_NVIC_EnableIRQ>

}
 800825a:	bf00      	nop
 800825c:	3720      	adds	r7, #32
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40021000 	.word	0x40021000
 8008268:	40010800 	.word	0x40010800
 800826c:	10310000 	.word	0x10310000

08008270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008274:	f000 f9ba 	bl	80085ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008278:	f000 f810 	bl	800829c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800827c:	f7ff ff98 	bl	80081b0 <MX_GPIO_Init>
  MX_CRC_Init();
 8008280:	f7ff ff64 	bl	800814c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8008284:	f000 f8b2 	bl	80083ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008288:	f000 f8da 	bl	8008440 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800828c:	2201      	movs	r2, #1
 800828e:	2102      	movs	r1, #2
 8008290:	4801      	ldr	r0, [pc, #4]	; (8008298 <main+0x28>)
 8008292:	f000 fcbb 	bl	8008c0c <HAL_GPIO_WritePin>
//  HAL_EXTI_GenerateSWI(&EXT_int);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008296:	e7fe      	b.n	8008296 <main+0x26>
 8008298:	40010800 	.word	0x40010800

0800829c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b090      	sub	sp, #64	; 0x40
 80082a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082a2:	f107 0318 	add.w	r3, r7, #24
 80082a6:	2228      	movs	r2, #40	; 0x28
 80082a8:	2100      	movs	r1, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f001 f9fa 	bl	80096a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082b0:	1d3b      	adds	r3, r7, #4
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]
 80082b8:	609a      	str	r2, [r3, #8]
 80082ba:	60da      	str	r2, [r3, #12]
 80082bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80082be:	2301      	movs	r3, #1
 80082c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80082c8:	2300      	movs	r3, #0
 80082ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082cc:	2301      	movs	r3, #1
 80082ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082d0:	2302      	movs	r3, #2
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80082d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80082da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082e0:	f107 0318 	add.w	r3, r7, #24
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fccb 	bl	8008c80 <HAL_RCC_OscConfig>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80082f0:	f000 f819 	bl	8008326 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082f4:	230f      	movs	r3, #15
 80082f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082f8:	2302      	movs	r3, #2
 80082fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800830a:	1d3b      	adds	r3, r7, #4
 800830c:	2102      	movs	r1, #2
 800830e:	4618      	mov	r0, r3
 8008310:	f000 ff38 	bl	8009184 <HAL_RCC_ClockConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800831a:	f000 f804 	bl	8008326 <Error_Handler>
  }
}
 800831e:	bf00      	nop
 8008320:	3740      	adds	r7, #64	; 0x40
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800832a:	b672      	cpsid	i
}
 800832c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800832e:	e7fe      	b.n	800832e <Error_Handler+0x8>

08008330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <HAL_MspInit+0x40>)
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	4a0d      	ldr	r2, [pc, #52]	; (8008370 <HAL_MspInit+0x40>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6193      	str	r3, [r2, #24]
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <HAL_MspInit+0x40>)
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	607b      	str	r3, [r7, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800834e:	4b08      	ldr	r3, [pc, #32]	; (8008370 <HAL_MspInit+0x40>)
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	4a07      	ldr	r2, [pc, #28]	; (8008370 <HAL_MspInit+0x40>)
 8008354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008358:	61d3      	str	r3, [r2, #28]
 800835a:	4b05      	ldr	r3, [pc, #20]	; (8008370 <HAL_MspInit+0x40>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr
 8008370:	40021000 	.word	0x40021000

08008374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008378:	e7fe      	b.n	8008378 <NMI_Handler+0x4>

0800837a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800837a:	b480      	push	{r7}
 800837c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800837e:	e7fe      	b.n	800837e <HardFault_Handler+0x4>

08008380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008384:	e7fe      	b.n	8008384 <MemManage_Handler+0x4>

08008386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008386:	b480      	push	{r7}
 8008388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800838a:	e7fe      	b.n	800838a <BusFault_Handler+0x4>

0800838c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008390:	e7fe      	b.n	8008390 <UsageFault_Handler+0x4>

08008392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008392:	b480      	push	{r7}
 8008394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr

0800839e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800839e:	b480      	push	{r7}
 80083a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083a2:	bf00      	nop
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083aa:	b480      	push	{r7}
 80083ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083ae:	bf00      	nop
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083ba:	f000 f95d 	bl	8008678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80083c8:	2200      	movs	r2, #0
 80083ca:	2102      	movs	r1, #2
 80083cc:	4803      	ldr	r0, [pc, #12]	; (80083dc <EXTI0_IRQHandler+0x18>)
 80083ce:	f000 fc1d 	bl	8008c0c <HAL_GPIO_WritePin>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80083d2:	2001      	movs	r0, #1
 80083d4:	f000 fc32 	bl	8008c3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80083d8:	bf00      	nop
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40010800 	.word	0x40010800

080083e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc80      	pop	{r7}
 80083ea:	4770      	bx	lr

080083ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <MX_USART2_UART_Init+0x50>)
 80083f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80083f6:	4b10      	ldr	r3, [pc, #64]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 80083f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083fe:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 8008400:	2200      	movs	r2, #0
 8008402:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 8008406:	2200      	movs	r2, #0
 8008408:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 800840c:	2200      	movs	r2, #0
 800840e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 8008412:	220c      	movs	r2, #12
 8008414:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 8008418:	2200      	movs	r2, #0
 800841a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 800841e:	2200      	movs	r2, #0
 8008420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008422:	4805      	ldr	r0, [pc, #20]	; (8008438 <MX_USART2_UART_Init+0x4c>)
 8008424:	f001 f83c 	bl	80094a0 <HAL_UART_Init>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800842e:	f7ff ff7a 	bl	8008326 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008432:	bf00      	nop
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000030 	.word	0x20000030
 800843c:	40004400 	.word	0x40004400

08008440 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008444:	4b11      	ldr	r3, [pc, #68]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008446:	4a12      	ldr	r2, [pc, #72]	; (8008490 <MX_USART3_UART_Init+0x50>)
 8008448:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800844c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008450:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008452:	4b0e      	ldr	r3, [pc, #56]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008458:	4b0c      	ldr	r3, [pc, #48]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800845a:	2200      	movs	r2, #0
 800845c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800845e:	4b0b      	ldr	r3, [pc, #44]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008466:	220c      	movs	r2, #12
 8008468:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800846a:	4b08      	ldr	r3, [pc, #32]	; (800848c <MX_USART3_UART_Init+0x4c>)
 800846c:	2200      	movs	r2, #0
 800846e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008472:	2200      	movs	r2, #0
 8008474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008476:	4805      	ldr	r0, [pc, #20]	; (800848c <MX_USART3_UART_Init+0x4c>)
 8008478:	f001 f812 	bl	80094a0 <HAL_UART_Init>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008482:	f7ff ff50 	bl	8008326 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008486:	bf00      	nop
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000078 	.word	0x20000078
 8008490:	40004800 	.word	0x40004800

08008494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	; 0x28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800849c:	f107 0318 	add.w	r3, r7, #24
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a37      	ldr	r2, [pc, #220]	; (800858c <HAL_UART_MspInit+0xf8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d130      	bne.n	8008516 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80084b4:	4b36      	ldr	r3, [pc, #216]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	4a35      	ldr	r2, [pc, #212]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084be:	61d3      	str	r3, [r2, #28]
 80084c0:	4b33      	ldr	r3, [pc, #204]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084cc:	4b30      	ldr	r3, [pc, #192]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084d2:	f043 0304 	orr.w	r3, r3, #4
 80084d6:	6193      	str	r3, [r2, #24]
 80084d8:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <HAL_UART_MspInit+0xfc>)
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	f003 0304 	and.w	r3, r3, #4
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80084e4:	2304      	movs	r3, #4
 80084e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e8:	2302      	movs	r3, #2
 80084ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084ec:	2303      	movs	r3, #3
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f0:	f107 0318 	add.w	r3, r7, #24
 80084f4:	4619      	mov	r1, r3
 80084f6:	4827      	ldr	r0, [pc, #156]	; (8008594 <HAL_UART_MspInit+0x100>)
 80084f8:	f000 fa04 	bl	8008904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80084fc:	2308      	movs	r3, #8
 80084fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008504:	2300      	movs	r3, #0
 8008506:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008508:	f107 0318 	add.w	r3, r7, #24
 800850c:	4619      	mov	r1, r3
 800850e:	4821      	ldr	r0, [pc, #132]	; (8008594 <HAL_UART_MspInit+0x100>)
 8008510:	f000 f9f8 	bl	8008904 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008514:	e036      	b.n	8008584 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1f      	ldr	r2, [pc, #124]	; (8008598 <HAL_UART_MspInit+0x104>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d131      	bne.n	8008584 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008520:	4b1b      	ldr	r3, [pc, #108]	; (8008590 <HAL_UART_MspInit+0xfc>)
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	4a1a      	ldr	r2, [pc, #104]	; (8008590 <HAL_UART_MspInit+0xfc>)
 8008526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800852a:	61d3      	str	r3, [r2, #28]
 800852c:	4b18      	ldr	r3, [pc, #96]	; (8008590 <HAL_UART_MspInit+0xfc>)
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <HAL_UART_MspInit+0xfc>)
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	4a14      	ldr	r2, [pc, #80]	; (8008590 <HAL_UART_MspInit+0xfc>)
 800853e:	f043 0308 	orr.w	r3, r3, #8
 8008542:	6193      	str	r3, [r2, #24]
 8008544:	4b12      	ldr	r3, [pc, #72]	; (8008590 <HAL_UART_MspInit+0xfc>)
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	60bb      	str	r3, [r7, #8]
 800854e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008556:	2302      	movs	r3, #2
 8008558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800855a:	2303      	movs	r3, #3
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800855e:	f107 0318 	add.w	r3, r7, #24
 8008562:	4619      	mov	r1, r3
 8008564:	480d      	ldr	r0, [pc, #52]	; (800859c <HAL_UART_MspInit+0x108>)
 8008566:	f000 f9cd 	bl	8008904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800856a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800856e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008574:	2300      	movs	r3, #0
 8008576:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008578:	f107 0318 	add.w	r3, r7, #24
 800857c:	4619      	mov	r1, r3
 800857e:	4807      	ldr	r0, [pc, #28]	; (800859c <HAL_UART_MspInit+0x108>)
 8008580:	f000 f9c0 	bl	8008904 <HAL_GPIO_Init>
}
 8008584:	bf00      	nop
 8008586:	3728      	adds	r7, #40	; 0x28
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40004400 	.word	0x40004400
 8008590:	40021000 	.word	0x40021000
 8008594:	40010800 	.word	0x40010800
 8008598:	40004800 	.word	0x40004800
 800859c:	40010c00 	.word	0x40010c00

080085a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80085a0:	f7ff ff1e 	bl	80083e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80085a4:	480b      	ldr	r0, [pc, #44]	; (80085d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80085a6:	490c      	ldr	r1, [pc, #48]	; (80085d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80085a8:	4a0c      	ldr	r2, [pc, #48]	; (80085dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80085aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085ac:	e002      	b.n	80085b4 <LoopCopyDataInit>

080085ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085b2:	3304      	adds	r3, #4

080085b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085b8:	d3f9      	bcc.n	80085ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085ba:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80085bc:	4c09      	ldr	r4, [pc, #36]	; (80085e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80085be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085c0:	e001      	b.n	80085c6 <LoopFillZerobss>

080085c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085c4:	3204      	adds	r2, #4

080085c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085c8:	d3fb      	bcc.n	80085c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80085ca:	f001 f847 	bl	800965c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085ce:	f7ff fe4f 	bl	8008270 <main>
  bx lr
 80085d2:	4770      	bx	lr
  ldr r0, =_sdata
 80085d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80085dc:	08009700 	.word	0x08009700
  ldr r2, =_sbss
 80085e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80085e4:	200000c4 	.word	0x200000c4

080085e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085e8:	e7fe      	b.n	80085e8 <ADC1_2_IRQHandler>
	...

080085ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <HAL_Init+0x28>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a07      	ldr	r2, [pc, #28]	; (8008614 <HAL_Init+0x28>)
 80085f6:	f043 0310 	orr.w	r3, r3, #16
 80085fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085fc:	2003      	movs	r0, #3
 80085fe:	f000 f923 	bl	8008848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008602:	200f      	movs	r0, #15
 8008604:	f000 f808 	bl	8008618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008608:	f7ff fe92 	bl	8008330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40022000 	.word	0x40022000

08008618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008620:	4b12      	ldr	r3, [pc, #72]	; (800866c <HAL_InitTick+0x54>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4b12      	ldr	r3, [pc, #72]	; (8008670 <HAL_InitTick+0x58>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	4619      	mov	r1, r3
 800862a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800862e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008632:	fbb2 f3f3 	udiv	r3, r2, r3
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f93b 	bl	80088b2 <HAL_SYSTICK_Config>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e00e      	b.n	8008664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b0f      	cmp	r3, #15
 800864a:	d80a      	bhi.n	8008662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800864c:	2200      	movs	r2, #0
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	f000 f903 	bl	800885e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <HAL_InitTick+0x5c>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	e000      	b.n	8008664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	20000000 	.word	0x20000000
 8008670:	20000008 	.word	0x20000008
 8008674:	20000004 	.word	0x20000004

08008678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800867c:	4b05      	ldr	r3, [pc, #20]	; (8008694 <HAL_IncTick+0x1c>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	4b05      	ldr	r3, [pc, #20]	; (8008698 <HAL_IncTick+0x20>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4413      	add	r3, r2
 8008688:	4a03      	ldr	r2, [pc, #12]	; (8008698 <HAL_IncTick+0x20>)
 800868a:	6013      	str	r3, [r2, #0]
}
 800868c:	bf00      	nop
 800868e:	46bd      	mov	sp, r7
 8008690:	bc80      	pop	{r7}
 8008692:	4770      	bx	lr
 8008694:	20000008 	.word	0x20000008
 8008698:	200000c0 	.word	0x200000c0

0800869c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
  return uwTick;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <HAL_GetTick+0x10>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr
 80086ac:	200000c0 	.word	0x200000c0

080086b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086c0:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <__NVIC_SetPriorityGrouping+0x44>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086cc:	4013      	ands	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80086d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80086e2:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <__NVIC_SetPriorityGrouping+0x44>)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	60d3      	str	r3, [r2, #12]
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	e000ed00 	.word	0xe000ed00

080086f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <__NVIC_GetPriorityGrouping+0x18>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	f003 0307 	and.w	r3, r3, #7
}
 8008706:	4618      	mov	r0, r3
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	e000ed00 	.word	0xe000ed00

08008714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800871e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	db0b      	blt.n	800873e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	f003 021f 	and.w	r2, r3, #31
 800872c:	4906      	ldr	r1, [pc, #24]	; (8008748 <__NVIC_EnableIRQ+0x34>)
 800872e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	2001      	movs	r0, #1
 8008736:	fa00 f202 	lsl.w	r2, r0, r2
 800873a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	e000e100 	.word	0xe000e100

0800874c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	4603      	mov	r3, r0
 8008754:	6039      	str	r1, [r7, #0]
 8008756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875c:	2b00      	cmp	r3, #0
 800875e:	db0a      	blt.n	8008776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	490c      	ldr	r1, [pc, #48]	; (8008798 <__NVIC_SetPriority+0x4c>)
 8008766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876a:	0112      	lsls	r2, r2, #4
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	440b      	add	r3, r1
 8008770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008774:	e00a      	b.n	800878c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	b2da      	uxtb	r2, r3
 800877a:	4908      	ldr	r1, [pc, #32]	; (800879c <__NVIC_SetPriority+0x50>)
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	3b04      	subs	r3, #4
 8008784:	0112      	lsls	r2, r2, #4
 8008786:	b2d2      	uxtb	r2, r2
 8008788:	440b      	add	r3, r1
 800878a:	761a      	strb	r2, [r3, #24]
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	e000e100 	.word	0xe000e100
 800879c:	e000ed00 	.word	0xe000ed00

080087a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b089      	sub	sp, #36	; 0x24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f1c3 0307 	rsb	r3, r3, #7
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	bf28      	it	cs
 80087be:	2304      	movcs	r3, #4
 80087c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	3304      	adds	r3, #4
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d902      	bls.n	80087d0 <NVIC_EncodePriority+0x30>
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	3b03      	subs	r3, #3
 80087ce:	e000      	b.n	80087d2 <NVIC_EncodePriority+0x32>
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087d4:	f04f 32ff 	mov.w	r2, #4294967295
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43da      	mvns	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	401a      	ands	r2, r3
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087e8:	f04f 31ff 	mov.w	r1, #4294967295
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	fa01 f303 	lsl.w	r3, r1, r3
 80087f2:	43d9      	mvns	r1, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087f8:	4313      	orrs	r3, r2
         );
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3724      	adds	r7, #36	; 0x24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bc80      	pop	{r7}
 8008802:	4770      	bx	lr

08008804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008814:	d301      	bcc.n	800881a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008816:	2301      	movs	r3, #1
 8008818:	e00f      	b.n	800883a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800881a:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <SysTick_Config+0x40>)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3b01      	subs	r3, #1
 8008820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008822:	210f      	movs	r1, #15
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	f7ff ff90 	bl	800874c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800882c:	4b05      	ldr	r3, [pc, #20]	; (8008844 <SysTick_Config+0x40>)
 800882e:	2200      	movs	r2, #0
 8008830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008832:	4b04      	ldr	r3, [pc, #16]	; (8008844 <SysTick_Config+0x40>)
 8008834:	2207      	movs	r2, #7
 8008836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	e000e010 	.word	0xe000e010

08008848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff2d 	bl	80086b0 <__NVIC_SetPriorityGrouping>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800885e:	b580      	push	{r7, lr}
 8008860:	b086      	sub	sp, #24
 8008862:	af00      	add	r7, sp, #0
 8008864:	4603      	mov	r3, r0
 8008866:	60b9      	str	r1, [r7, #8]
 8008868:	607a      	str	r2, [r7, #4]
 800886a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008870:	f7ff ff42 	bl	80086f8 <__NVIC_GetPriorityGrouping>
 8008874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	6978      	ldr	r0, [r7, #20]
 800887c:	f7ff ff90 	bl	80087a0 <NVIC_EncodePriority>
 8008880:	4602      	mov	r2, r0
 8008882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff ff5f 	bl	800874c <__NVIC_SetPriority>
}
 800888e:	bf00      	nop
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	4603      	mov	r3, r0
 800889e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff ff35 	bl	8008714 <__NVIC_EnableIRQ>
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ffa2 	bl	8008804 <SysTick_Config>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e00e      	b.n	80088fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	795b      	ldrb	r3, [r3, #5]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7ff fc41 	bl	8008174 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008904:	b480      	push	{r7}
 8008906:	b08b      	sub	sp, #44	; 0x2c
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800890e:	2300      	movs	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008912:	2300      	movs	r3, #0
 8008914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008916:	e169      	b.n	8008bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008918:	2201      	movs	r2, #1
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	fa02 f303 	lsl.w	r3, r2, r3
 8008920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	4013      	ands	r3, r2
 800892a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	429a      	cmp	r2, r3
 8008932:	f040 8158 	bne.w	8008be6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4a9a      	ldr	r2, [pc, #616]	; (8008ba4 <HAL_GPIO_Init+0x2a0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d05e      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
 8008940:	4a98      	ldr	r2, [pc, #608]	; (8008ba4 <HAL_GPIO_Init+0x2a0>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d875      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 8008946:	4a98      	ldr	r2, [pc, #608]	; (8008ba8 <HAL_GPIO_Init+0x2a4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d058      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
 800894c:	4a96      	ldr	r2, [pc, #600]	; (8008ba8 <HAL_GPIO_Init+0x2a4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d86f      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 8008952:	4a96      	ldr	r2, [pc, #600]	; (8008bac <HAL_GPIO_Init+0x2a8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d052      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
 8008958:	4a94      	ldr	r2, [pc, #592]	; (8008bac <HAL_GPIO_Init+0x2a8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d869      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 800895e:	4a94      	ldr	r2, [pc, #592]	; (8008bb0 <HAL_GPIO_Init+0x2ac>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d04c      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
 8008964:	4a92      	ldr	r2, [pc, #584]	; (8008bb0 <HAL_GPIO_Init+0x2ac>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d863      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 800896a:	4a92      	ldr	r2, [pc, #584]	; (8008bb4 <HAL_GPIO_Init+0x2b0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d046      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
 8008970:	4a90      	ldr	r2, [pc, #576]	; (8008bb4 <HAL_GPIO_Init+0x2b0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d85d      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 8008976:	2b12      	cmp	r3, #18
 8008978:	d82a      	bhi.n	80089d0 <HAL_GPIO_Init+0xcc>
 800897a:	2b12      	cmp	r3, #18
 800897c:	d859      	bhi.n	8008a32 <HAL_GPIO_Init+0x12e>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_GPIO_Init+0x80>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089ff 	.word	0x080089ff
 8008988:	080089d9 	.word	0x080089d9
 800898c:	080089eb 	.word	0x080089eb
 8008990:	08008a2d 	.word	0x08008a2d
 8008994:	08008a33 	.word	0x08008a33
 8008998:	08008a33 	.word	0x08008a33
 800899c:	08008a33 	.word	0x08008a33
 80089a0:	08008a33 	.word	0x08008a33
 80089a4:	08008a33 	.word	0x08008a33
 80089a8:	08008a33 	.word	0x08008a33
 80089ac:	08008a33 	.word	0x08008a33
 80089b0:	08008a33 	.word	0x08008a33
 80089b4:	08008a33 	.word	0x08008a33
 80089b8:	08008a33 	.word	0x08008a33
 80089bc:	08008a33 	.word	0x08008a33
 80089c0:	08008a33 	.word	0x08008a33
 80089c4:	08008a33 	.word	0x08008a33
 80089c8:	080089e1 	.word	0x080089e1
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	4a79      	ldr	r2, [pc, #484]	; (8008bb8 <HAL_GPIO_Init+0x2b4>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80089d6:	e02c      	b.n	8008a32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	623b      	str	r3, [r7, #32]
          break;
 80089de:	e029      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	3304      	adds	r3, #4
 80089e6:	623b      	str	r3, [r7, #32]
          break;
 80089e8:	e024      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	3308      	adds	r3, #8
 80089f0:	623b      	str	r3, [r7, #32]
          break;
 80089f2:	e01f      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	330c      	adds	r3, #12
 80089fa:	623b      	str	r3, [r7, #32]
          break;
 80089fc:	e01a      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008a06:	2304      	movs	r3, #4
 8008a08:	623b      	str	r3, [r7, #32]
          break;
 8008a0a:	e013      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d105      	bne.n	8008a20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a14:	2308      	movs	r3, #8
 8008a16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69fa      	ldr	r2, [r7, #28]
 8008a1c:	611a      	str	r2, [r3, #16]
          break;
 8008a1e:	e009      	b.n	8008a34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a20:	2308      	movs	r3, #8
 8008a22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	615a      	str	r2, [r3, #20]
          break;
 8008a2a:	e003      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	623b      	str	r3, [r7, #32]
          break;
 8008a30:	e000      	b.n	8008a34 <HAL_GPIO_Init+0x130>
          break;
 8008a32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2bff      	cmp	r3, #255	; 0xff
 8008a38:	d801      	bhi.n	8008a3e <HAL_GPIO_Init+0x13a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	e001      	b.n	8008a42 <HAL_GPIO_Init+0x13e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3304      	adds	r3, #4
 8008a42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2bff      	cmp	r3, #255	; 0xff
 8008a48:	d802      	bhi.n	8008a50 <HAL_GPIO_Init+0x14c>
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	e002      	b.n	8008a56 <HAL_GPIO_Init+0x152>
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	3b08      	subs	r3, #8
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	210f      	movs	r1, #15
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	fa01 f303 	lsl.w	r3, r1, r3
 8008a64:	43db      	mvns	r3, r3
 8008a66:	401a      	ands	r2, r3
 8008a68:	6a39      	ldr	r1, [r7, #32]
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a70:	431a      	orrs	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80b1 	beq.w	8008be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008a84:	4b4d      	ldr	r3, [pc, #308]	; (8008bbc <HAL_GPIO_Init+0x2b8>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	4a4c      	ldr	r2, [pc, #304]	; (8008bbc <HAL_GPIO_Init+0x2b8>)
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	6193      	str	r3, [r2, #24]
 8008a90:	4b4a      	ldr	r3, [pc, #296]	; (8008bbc <HAL_GPIO_Init+0x2b8>)
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008a9c:	4a48      	ldr	r2, [pc, #288]	; (8008bc0 <HAL_GPIO_Init+0x2bc>)
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	089b      	lsrs	r3, r3, #2
 8008aa2:	3302      	adds	r3, #2
 8008aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	f003 0303 	and.w	r3, r3, #3
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	220f      	movs	r2, #15
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a40      	ldr	r2, [pc, #256]	; (8008bc4 <HAL_GPIO_Init+0x2c0>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <HAL_GPIO_Init+0x1ec>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <HAL_GPIO_Init+0x2c4>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00d      	beq.n	8008aec <HAL_GPIO_Init+0x1e8>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3e      	ldr	r2, [pc, #248]	; (8008bcc <HAL_GPIO_Init+0x2c8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d007      	beq.n	8008ae8 <HAL_GPIO_Init+0x1e4>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <HAL_GPIO_Init+0x2cc>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d101      	bne.n	8008ae4 <HAL_GPIO_Init+0x1e0>
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e006      	b.n	8008af2 <HAL_GPIO_Init+0x1ee>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	e004      	b.n	8008af2 <HAL_GPIO_Init+0x1ee>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e002      	b.n	8008af2 <HAL_GPIO_Init+0x1ee>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <HAL_GPIO_Init+0x1ee>
 8008af0:	2300      	movs	r3, #0
 8008af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af4:	f002 0203 	and.w	r2, r2, #3
 8008af8:	0092      	lsls	r2, r2, #2
 8008afa:	4093      	lsls	r3, r2
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008b02:	492f      	ldr	r1, [pc, #188]	; (8008bc0 <HAL_GPIO_Init+0x2bc>)
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	089b      	lsrs	r3, r3, #2
 8008b08:	3302      	adds	r3, #2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d006      	beq.n	8008b2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008b1c:	4b2d      	ldr	r3, [pc, #180]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b1e:	689a      	ldr	r2, [r3, #8]
 8008b20:	492c      	ldr	r1, [pc, #176]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]
 8008b28:	e006      	b.n	8008b38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008b2a:	4b2a      	ldr	r3, [pc, #168]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b2c:	689a      	ldr	r2, [r3, #8]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	43db      	mvns	r3, r3
 8008b32:	4928      	ldr	r1, [pc, #160]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d006      	beq.n	8008b52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	4922      	ldr	r1, [pc, #136]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60cb      	str	r3, [r1, #12]
 8008b50:	e006      	b.n	8008b60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	491e      	ldr	r1, [pc, #120]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d006      	beq.n	8008b7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008b6c:	4b19      	ldr	r3, [pc, #100]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	4918      	ldr	r1, [pc, #96]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	604b      	str	r3, [r1, #4]
 8008b78:	e006      	b.n	8008b88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	43db      	mvns	r3, r3
 8008b82:	4914      	ldr	r1, [pc, #80]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d021      	beq.n	8008bd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	490e      	ldr	r1, [pc, #56]	; (8008bd4 <HAL_GPIO_Init+0x2d0>)
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	600b      	str	r3, [r1, #0]
 8008ba0:	e021      	b.n	8008be6 <HAL_GPIO_Init+0x2e2>
 8008ba2:	bf00      	nop
 8008ba4:	10320000 	.word	0x10320000
 8008ba8:	10310000 	.word	0x10310000
 8008bac:	10220000 	.word	0x10220000
 8008bb0:	10210000 	.word	0x10210000
 8008bb4:	10120000 	.word	0x10120000
 8008bb8:	10110000 	.word	0x10110000
 8008bbc:	40021000 	.word	0x40021000
 8008bc0:	40010000 	.word	0x40010000
 8008bc4:	40010800 	.word	0x40010800
 8008bc8:	40010c00 	.word	0x40010c00
 8008bcc:	40011000 	.word	0x40011000
 8008bd0:	40011400 	.word	0x40011400
 8008bd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <HAL_GPIO_Init+0x304>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	43db      	mvns	r3, r3
 8008be0:	4909      	ldr	r1, [pc, #36]	; (8008c08 <HAL_GPIO_Init+0x304>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	3301      	adds	r3, #1
 8008bea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f47f ae8e 	bne.w	8008918 <HAL_GPIO_Init+0x14>
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
 8008c00:	372c      	adds	r7, #44	; 0x2c
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr
 8008c08:	40010400 	.word	0x40010400

08008c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	807b      	strh	r3, [r7, #2]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c1c:	787b      	ldrb	r3, [r7, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008c28:	e003      	b.n	8008c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	041a      	lsls	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	611a      	str	r2, [r3, #16]
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008c46:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c48:	695a      	ldr	r2, [r3, #20]
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d006      	beq.n	8008c60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c52:	4a05      	ldr	r2, [pc, #20]	; (8008c68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c54:	88fb      	ldrh	r3, [r7, #6]
 8008c56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f806 	bl	8008c6c <HAL_GPIO_EXTI_Callback>
  }
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40010400 	.word	0x40010400

08008c6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bc80      	pop	{r7}
 8008c7e:	4770      	bx	lr

08008c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e272      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 8087 	beq.w	8008dae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ca0:	4b92      	ldr	r3, [pc, #584]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f003 030c 	and.w	r3, r3, #12
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d00c      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008cac:	4b8f      	ldr	r3, [pc, #572]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f003 030c 	and.w	r3, r3, #12
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d112      	bne.n	8008cde <HAL_RCC_OscConfig+0x5e>
 8008cb8:	4b8c      	ldr	r3, [pc, #560]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc4:	d10b      	bne.n	8008cde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc6:	4b89      	ldr	r3, [pc, #548]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d06c      	beq.n	8008dac <HAL_RCC_OscConfig+0x12c>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d168      	bne.n	8008dac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e24c      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce6:	d106      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x76>
 8008ce8:	4b80      	ldr	r3, [pc, #512]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a7f      	ldr	r2, [pc, #508]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	e02e      	b.n	8008d54 <HAL_RCC_OscConfig+0xd4>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10c      	bne.n	8008d18 <HAL_RCC_OscConfig+0x98>
 8008cfe:	4b7b      	ldr	r3, [pc, #492]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a7a      	ldr	r2, [pc, #488]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	4b78      	ldr	r3, [pc, #480]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a77      	ldr	r2, [pc, #476]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	e01d      	b.n	8008d54 <HAL_RCC_OscConfig+0xd4>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d20:	d10c      	bne.n	8008d3c <HAL_RCC_OscConfig+0xbc>
 8008d22:	4b72      	ldr	r3, [pc, #456]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a71      	ldr	r2, [pc, #452]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a6e      	ldr	r2, [pc, #440]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	e00b      	b.n	8008d54 <HAL_RCC_OscConfig+0xd4>
 8008d3c:	4b6b      	ldr	r3, [pc, #428]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a6a      	ldr	r2, [pc, #424]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	4b68      	ldr	r3, [pc, #416]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a67      	ldr	r2, [pc, #412]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d013      	beq.n	8008d84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5c:	f7ff fc9e 	bl	800869c <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d64:	f7ff fc9a 	bl	800869c <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e200      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d76:	4b5d      	ldr	r3, [pc, #372]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0xe4>
 8008d82:	e014      	b.n	8008dae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d84:	f7ff fc8a 	bl	800869c <HAL_GetTick>
 8008d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d8c:	f7ff fc86 	bl	800869c <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b64      	cmp	r3, #100	; 0x64
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e1ec      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d9e:	4b53      	ldr	r3, [pc, #332]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f0      	bne.n	8008d8c <HAL_RCC_OscConfig+0x10c>
 8008daa:	e000      	b.n	8008dae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d063      	beq.n	8008e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dba:	4b4c      	ldr	r3, [pc, #304]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008dc6:	4b49      	ldr	r3, [pc, #292]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f003 030c 	and.w	r3, r3, #12
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d11c      	bne.n	8008e0c <HAL_RCC_OscConfig+0x18c>
 8008dd2:	4b46      	ldr	r3, [pc, #280]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d116      	bne.n	8008e0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008dde:	4b43      	ldr	r3, [pc, #268]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <HAL_RCC_OscConfig+0x176>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d001      	beq.n	8008df6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e1c0      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008df6:	4b3d      	ldr	r3, [pc, #244]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	00db      	lsls	r3, r3, #3
 8008e04:	4939      	ldr	r1, [pc, #228]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e0a:	e03a      	b.n	8008e82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d020      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e14:	4b36      	ldr	r3, [pc, #216]	; (8008ef0 <HAL_RCC_OscConfig+0x270>)
 8008e16:	2201      	movs	r2, #1
 8008e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e1a:	f7ff fc3f 	bl	800869c <HAL_GetTick>
 8008e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e20:	e008      	b.n	8008e34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e22:	f7ff fc3b 	bl	800869c <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d901      	bls.n	8008e34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e1a1      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e34:	4b2d      	ldr	r3, [pc, #180]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0f0      	beq.n	8008e22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e40:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	4927      	ldr	r1, [pc, #156]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	600b      	str	r3, [r1, #0]
 8008e54:	e015      	b.n	8008e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e56:	4b26      	ldr	r3, [pc, #152]	; (8008ef0 <HAL_RCC_OscConfig+0x270>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e5c:	f7ff fc1e 	bl	800869c <HAL_GetTick>
 8008e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e64:	f7ff fc1a 	bl	800869c <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e180      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e76:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f0      	bne.n	8008e64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0308 	and.w	r3, r3, #8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d03a      	beq.n	8008f04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d019      	beq.n	8008eca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e96:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <HAL_RCC_OscConfig+0x274>)
 8008e98:	2201      	movs	r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e9c:	f7ff fbfe 	bl	800869c <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ea4:	f7ff fbfa 	bl	800869c <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e160      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <HAL_RCC_OscConfig+0x26c>)
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	f000 face 	bl	8009464 <RCC_Delay>
 8008ec8:	e01c      	b.n	8008f04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <HAL_RCC_OscConfig+0x274>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ed0:	f7ff fbe4 	bl	800869c <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed6:	e00f      	b.n	8008ef8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ed8:	f7ff fbe0 	bl	800869c <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d908      	bls.n	8008ef8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e146      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
 8008eea:	bf00      	nop
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	42420000 	.word	0x42420000
 8008ef4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ef8:	4b92      	ldr	r3, [pc, #584]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e9      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 80a6 	beq.w	800905e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f12:	2300      	movs	r3, #0
 8008f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f16:	4b8b      	ldr	r3, [pc, #556]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10d      	bne.n	8008f3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f22:	4b88      	ldr	r3, [pc, #544]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	4a87      	ldr	r2, [pc, #540]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f2c:	61d3      	str	r3, [r2, #28]
 8008f2e:	4b85      	ldr	r3, [pc, #532]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f3e:	4b82      	ldr	r3, [pc, #520]	; (8009148 <HAL_RCC_OscConfig+0x4c8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d118      	bne.n	8008f7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f4a:	4b7f      	ldr	r3, [pc, #508]	; (8009148 <HAL_RCC_OscConfig+0x4c8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a7e      	ldr	r2, [pc, #504]	; (8009148 <HAL_RCC_OscConfig+0x4c8>)
 8008f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f56:	f7ff fba1 	bl	800869c <HAL_GetTick>
 8008f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f5c:	e008      	b.n	8008f70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f5e:	f7ff fb9d 	bl	800869c <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b64      	cmp	r3, #100	; 0x64
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e103      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f70:	4b75      	ldr	r3, [pc, #468]	; (8009148 <HAL_RCC_OscConfig+0x4c8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0f0      	beq.n	8008f5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d106      	bne.n	8008f92 <HAL_RCC_OscConfig+0x312>
 8008f84:	4b6f      	ldr	r3, [pc, #444]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	4a6e      	ldr	r2, [pc, #440]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	6213      	str	r3, [r2, #32]
 8008f90:	e02d      	b.n	8008fee <HAL_RCC_OscConfig+0x36e>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <HAL_RCC_OscConfig+0x334>
 8008f9a:	4b6a      	ldr	r3, [pc, #424]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	4a69      	ldr	r2, [pc, #420]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	6213      	str	r3, [r2, #32]
 8008fa6:	4b67      	ldr	r3, [pc, #412]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	4a66      	ldr	r2, [pc, #408]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fac:	f023 0304 	bic.w	r3, r3, #4
 8008fb0:	6213      	str	r3, [r2, #32]
 8008fb2:	e01c      	b.n	8008fee <HAL_RCC_OscConfig+0x36e>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	2b05      	cmp	r3, #5
 8008fba:	d10c      	bne.n	8008fd6 <HAL_RCC_OscConfig+0x356>
 8008fbc:	4b61      	ldr	r3, [pc, #388]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	4a60      	ldr	r2, [pc, #384]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fc2:	f043 0304 	orr.w	r3, r3, #4
 8008fc6:	6213      	str	r3, [r2, #32]
 8008fc8:	4b5e      	ldr	r3, [pc, #376]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	4a5d      	ldr	r2, [pc, #372]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	6213      	str	r3, [r2, #32]
 8008fd4:	e00b      	b.n	8008fee <HAL_RCC_OscConfig+0x36e>
 8008fd6:	4b5b      	ldr	r3, [pc, #364]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	4a5a      	ldr	r2, [pc, #360]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fdc:	f023 0301 	bic.w	r3, r3, #1
 8008fe0:	6213      	str	r3, [r2, #32]
 8008fe2:	4b58      	ldr	r3, [pc, #352]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	4a57      	ldr	r2, [pc, #348]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8008fe8:	f023 0304 	bic.w	r3, r3, #4
 8008fec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d015      	beq.n	8009022 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ff6:	f7ff fb51 	bl	800869c <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ffc:	e00a      	b.n	8009014 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ffe:	f7ff fb4d 	bl	800869c <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	f241 3288 	movw	r2, #5000	; 0x1388
 800900c:	4293      	cmp	r3, r2
 800900e:	d901      	bls.n	8009014 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e0b1      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009014:	4b4b      	ldr	r3, [pc, #300]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	f003 0302 	and.w	r3, r3, #2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0ee      	beq.n	8008ffe <HAL_RCC_OscConfig+0x37e>
 8009020:	e014      	b.n	800904c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009022:	f7ff fb3b 	bl	800869c <HAL_GetTick>
 8009026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009028:	e00a      	b.n	8009040 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800902a:	f7ff fb37 	bl	800869c <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	4293      	cmp	r3, r2
 800903a:	d901      	bls.n	8009040 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e09b      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009040:	4b40      	ldr	r3, [pc, #256]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1ee      	bne.n	800902a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d105      	bne.n	800905e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009052:	4b3c      	ldr	r3, [pc, #240]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	4a3b      	ldr	r2, [pc, #236]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 8009058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800905c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 8087 	beq.w	8009176 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009068:	4b36      	ldr	r3, [pc, #216]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f003 030c 	and.w	r3, r3, #12
 8009070:	2b08      	cmp	r3, #8
 8009072:	d061      	beq.n	8009138 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d146      	bne.n	800910a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800907c:	4b33      	ldr	r3, [pc, #204]	; (800914c <HAL_RCC_OscConfig+0x4cc>)
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009082:	f7ff fb0b 	bl	800869c <HAL_GetTick>
 8009086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009088:	e008      	b.n	800909c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800908a:	f7ff fb07 	bl	800869c <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	2b02      	cmp	r3, #2
 8009096:	d901      	bls.n	800909c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009098:	2303      	movs	r3, #3
 800909a:	e06d      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800909c:	4b29      	ldr	r3, [pc, #164]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1f0      	bne.n	800908a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
 80090ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090b0:	d108      	bne.n	80090c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80090b2:	4b24      	ldr	r3, [pc, #144]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4921      	ldr	r1, [pc, #132]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 80090c0:	4313      	orrs	r3, r2
 80090c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090c4:	4b1f      	ldr	r3, [pc, #124]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a19      	ldr	r1, [r3, #32]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	430b      	orrs	r3, r1
 80090d6:	491b      	ldr	r1, [pc, #108]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090dc:	4b1b      	ldr	r3, [pc, #108]	; (800914c <HAL_RCC_OscConfig+0x4cc>)
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090e2:	f7ff fadb 	bl	800869c <HAL_GetTick>
 80090e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090e8:	e008      	b.n	80090fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ea:	f7ff fad7 	bl	800869c <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e03d      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80090fc:	4b11      	ldr	r3, [pc, #68]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0f0      	beq.n	80090ea <HAL_RCC_OscConfig+0x46a>
 8009108:	e035      	b.n	8009176 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800910a:	4b10      	ldr	r3, [pc, #64]	; (800914c <HAL_RCC_OscConfig+0x4cc>)
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009110:	f7ff fac4 	bl	800869c <HAL_GetTick>
 8009114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009116:	e008      	b.n	800912a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009118:	f7ff fac0 	bl	800869c <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	2b02      	cmp	r3, #2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e026      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <HAL_RCC_OscConfig+0x4c4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1f0      	bne.n	8009118 <HAL_RCC_OscConfig+0x498>
 8009136:	e01e      	b.n	8009176 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d107      	bne.n	8009150 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e019      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
 8009144:	40021000 	.word	0x40021000
 8009148:	40007000 	.word	0x40007000
 800914c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <HAL_RCC_OscConfig+0x500>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	429a      	cmp	r2, r3
 8009162:	d106      	bne.n	8009172 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800916e:	429a      	cmp	r2, r3
 8009170:	d001      	beq.n	8009176 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40021000 	.word	0x40021000

08009184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e0d0      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009198:	4b6a      	ldr	r3, [pc, #424]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d910      	bls.n	80091c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b67      	ldr	r3, [pc, #412]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f023 0207 	bic.w	r2, r3, #7
 80091ae:	4965      	ldr	r1, [pc, #404]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091b6:	4b63      	ldr	r3, [pc, #396]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d001      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e0b8      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d020      	beq.n	8009216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091e0:	4b59      	ldr	r3, [pc, #356]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	4a58      	ldr	r2, [pc, #352]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80091e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80091ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d005      	beq.n	8009204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091f8:	4b53      	ldr	r3, [pc, #332]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4a52      	ldr	r2, [pc, #328]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80091fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009204:	4b50      	ldr	r3, [pc, #320]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	494d      	ldr	r1, [pc, #308]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009212:	4313      	orrs	r3, r2
 8009214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d040      	beq.n	80092a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d107      	bne.n	800923a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800922a:	4b47      	ldr	r3, [pc, #284]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d115      	bne.n	8009262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e07f      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d107      	bne.n	8009252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009242:	4b41      	ldr	r3, [pc, #260]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e073      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009252:	4b3d      	ldr	r3, [pc, #244]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e06b      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009262:	4b39      	ldr	r3, [pc, #228]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f023 0203 	bic.w	r2, r3, #3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	4936      	ldr	r1, [pc, #216]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009270:	4313      	orrs	r3, r2
 8009272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009274:	f7ff fa12 	bl	800869c <HAL_GetTick>
 8009278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927a:	e00a      	b.n	8009292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800927c:	f7ff fa0e 	bl	800869c <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	f241 3288 	movw	r2, #5000	; 0x1388
 800928a:	4293      	cmp	r3, r2
 800928c:	d901      	bls.n	8009292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e053      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009292:	4b2d      	ldr	r3, [pc, #180]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f003 020c 	and.w	r2, r3, #12
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d1eb      	bne.n	800927c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092a4:	4b27      	ldr	r3, [pc, #156]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d210      	bcs.n	80092d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f023 0207 	bic.w	r2, r3, #7
 80092ba:	4922      	ldr	r1, [pc, #136]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	4313      	orrs	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c2:	4b20      	ldr	r3, [pc, #128]	; (8009344 <HAL_RCC_ClockConfig+0x1c0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d001      	beq.n	80092d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e032      	b.n	800933a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0304 	and.w	r3, r3, #4
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d008      	beq.n	80092f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	4916      	ldr	r1, [pc, #88]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0308 	and.w	r3, r3, #8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80092fe:	4b12      	ldr	r3, [pc, #72]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	490e      	ldr	r1, [pc, #56]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 800930e:	4313      	orrs	r3, r2
 8009310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009312:	f000 f821 	bl	8009358 <HAL_RCC_GetSysClockFreq>
 8009316:	4602      	mov	r2, r0
 8009318:	4b0b      	ldr	r3, [pc, #44]	; (8009348 <HAL_RCC_ClockConfig+0x1c4>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	091b      	lsrs	r3, r3, #4
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	490a      	ldr	r1, [pc, #40]	; (800934c <HAL_RCC_ClockConfig+0x1c8>)
 8009324:	5ccb      	ldrb	r3, [r1, r3]
 8009326:	fa22 f303 	lsr.w	r3, r2, r3
 800932a:	4a09      	ldr	r2, [pc, #36]	; (8009350 <HAL_RCC_ClockConfig+0x1cc>)
 800932c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <HAL_RCC_ClockConfig+0x1d0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f7ff f970 	bl	8008618 <HAL_InitTick>

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	40022000 	.word	0x40022000
 8009348:	40021000 	.word	0x40021000
 800934c:	080096cc 	.word	0x080096cc
 8009350:	20000000 	.word	0x20000000
 8009354:	20000004 	.word	0x20000004

08009358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	2300      	movs	r3, #0
 8009364:	60bb      	str	r3, [r7, #8]
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	2300      	movs	r3, #0
 800936c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009372:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <HAL_RCC_GetSysClockFreq+0x94>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f003 030c 	and.w	r3, r3, #12
 800937e:	2b04      	cmp	r3, #4
 8009380:	d002      	beq.n	8009388 <HAL_RCC_GetSysClockFreq+0x30>
 8009382:	2b08      	cmp	r3, #8
 8009384:	d003      	beq.n	800938e <HAL_RCC_GetSysClockFreq+0x36>
 8009386:	e027      	b.n	80093d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009388:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800938a:	613b      	str	r3, [r7, #16]
      break;
 800938c:	e027      	b.n	80093de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	0c9b      	lsrs	r3, r3, #18
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	4a17      	ldr	r2, [pc, #92]	; (80093f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8009398:	5cd3      	ldrb	r3, [r2, r3]
 800939a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d010      	beq.n	80093c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80093a6:	4b11      	ldr	r3, [pc, #68]	; (80093ec <HAL_RCC_GetSysClockFreq+0x94>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	0c5b      	lsrs	r3, r3, #17
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80093b2:	5cd3      	ldrb	r3, [r2, r3]
 80093b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a0d      	ldr	r2, [pc, #52]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80093ba:	fb03 f202 	mul.w	r2, r3, r2
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e004      	b.n	80093d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4a0c      	ldr	r2, [pc, #48]	; (80093fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	613b      	str	r3, [r7, #16]
      break;
 80093d6:	e002      	b.n	80093de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80093da:	613b      	str	r3, [r7, #16]
      break;
 80093dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093de:	693b      	ldr	r3, [r7, #16]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	371c      	adds	r7, #28
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	40021000 	.word	0x40021000
 80093f0:	007a1200 	.word	0x007a1200
 80093f4:	080096e4 	.word	0x080096e4
 80093f8:	080096f4 	.word	0x080096f4
 80093fc:	003d0900 	.word	0x003d0900

08009400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009404:	4b02      	ldr	r3, [pc, #8]	; (8009410 <HAL_RCC_GetHCLKFreq+0x10>)
 8009406:	681b      	ldr	r3, [r3, #0]
}
 8009408:	4618      	mov	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	bc80      	pop	{r7}
 800940e:	4770      	bx	lr
 8009410:	20000000 	.word	0x20000000

08009414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009418:	f7ff fff2 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 800941c:	4602      	mov	r2, r0
 800941e:	4b05      	ldr	r3, [pc, #20]	; (8009434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	4903      	ldr	r1, [pc, #12]	; (8009438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800942a:	5ccb      	ldrb	r3, [r1, r3]
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009430:	4618      	mov	r0, r3
 8009432:	bd80      	pop	{r7, pc}
 8009434:	40021000 	.word	0x40021000
 8009438:	080096dc 	.word	0x080096dc

0800943c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009440:	f7ff ffde 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 8009444:	4602      	mov	r2, r0
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	0adb      	lsrs	r3, r3, #11
 800944c:	f003 0307 	and.w	r3, r3, #7
 8009450:	4903      	ldr	r1, [pc, #12]	; (8009460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009452:	5ccb      	ldrb	r3, [r1, r3]
 8009454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009458:	4618      	mov	r0, r3
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40021000 	.word	0x40021000
 8009460:	080096dc 	.word	0x080096dc

08009464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <RCC_Delay+0x34>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0a      	ldr	r2, [pc, #40]	; (800949c <RCC_Delay+0x38>)
 8009472:	fba2 2303 	umull	r2, r3, r2, r3
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	fb02 f303 	mul.w	r3, r2, r3
 800947e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009480:	bf00      	nop
  }
  while (Delay --);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	1e5a      	subs	r2, r3, #1
 8009486:	60fa      	str	r2, [r7, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1f9      	bne.n	8009480 <RCC_Delay+0x1c>
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr
 8009498:	20000000 	.word	0x20000000
 800949c:	10624dd3 	.word	0x10624dd3

080094a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e042      	b.n	8009538 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe ffe4 	bl	8008494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2224      	movs	r2, #36	; 0x24
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f82b 	bl	8009540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695a      	ldr	r2, [r3, #20]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68da      	ldr	r2, [r3, #12]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689a      	ldr	r2, [r3, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	4313      	orrs	r3, r2
 800956e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800957a:	f023 030c 	bic.w	r3, r3, #12
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6812      	ldr	r2, [r2, #0]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	430b      	orrs	r3, r1
 8009586:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	699a      	ldr	r2, [r3, #24]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a2c      	ldr	r2, [pc, #176]	; (8009654 <UART_SetConfig+0x114>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d103      	bne.n	80095b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80095a8:	f7ff ff48 	bl	800943c <HAL_RCC_GetPCLK2Freq>
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	e002      	b.n	80095b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80095b0:	f7ff ff30 	bl	8009414 <HAL_RCC_GetPCLK1Freq>
 80095b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	009a      	lsls	r2, r3, #2
 80095c0:	441a      	add	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095cc:	4a22      	ldr	r2, [pc, #136]	; (8009658 <UART_SetConfig+0x118>)
 80095ce:	fba2 2303 	umull	r2, r3, r2, r3
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	0119      	lsls	r1, r3, #4
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009a      	lsls	r2, r3, #2
 80095e0:	441a      	add	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80095ec:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <UART_SetConfig+0x118>)
 80095ee:	fba3 0302 	umull	r0, r3, r3, r2
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	2064      	movs	r0, #100	; 0x64
 80095f6:	fb00 f303 	mul.w	r3, r0, r3
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	011b      	lsls	r3, r3, #4
 80095fe:	3332      	adds	r3, #50	; 0x32
 8009600:	4a15      	ldr	r2, [pc, #84]	; (8009658 <UART_SetConfig+0x118>)
 8009602:	fba2 2303 	umull	r2, r3, r2, r3
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800960c:	4419      	add	r1, r3
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009a      	lsls	r2, r3, #2
 8009618:	441a      	add	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	fbb2 f2f3 	udiv	r2, r2, r3
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <UART_SetConfig+0x118>)
 8009626:	fba3 0302 	umull	r0, r3, r3, r2
 800962a:	095b      	lsrs	r3, r3, #5
 800962c:	2064      	movs	r0, #100	; 0x64
 800962e:	fb00 f303 	mul.w	r3, r0, r3
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	3332      	adds	r3, #50	; 0x32
 8009638:	4a07      	ldr	r2, [pc, #28]	; (8009658 <UART_SetConfig+0x118>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	440a      	add	r2, r1
 800964a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	40013800 	.word	0x40013800
 8009658:	51eb851f 	.word	0x51eb851f

0800965c <__libc_init_array>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	2600      	movs	r6, #0
 8009660:	4d0c      	ldr	r5, [pc, #48]	; (8009694 <__libc_init_array+0x38>)
 8009662:	4c0d      	ldr	r4, [pc, #52]	; (8009698 <__libc_init_array+0x3c>)
 8009664:	1b64      	subs	r4, r4, r5
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	42a6      	cmp	r6, r4
 800966a:	d109      	bne.n	8009680 <__libc_init_array+0x24>
 800966c:	f000 f822 	bl	80096b4 <_init>
 8009670:	2600      	movs	r6, #0
 8009672:	4d0a      	ldr	r5, [pc, #40]	; (800969c <__libc_init_array+0x40>)
 8009674:	4c0a      	ldr	r4, [pc, #40]	; (80096a0 <__libc_init_array+0x44>)
 8009676:	1b64      	subs	r4, r4, r5
 8009678:	10a4      	asrs	r4, r4, #2
 800967a:	42a6      	cmp	r6, r4
 800967c:	d105      	bne.n	800968a <__libc_init_array+0x2e>
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	f855 3b04 	ldr.w	r3, [r5], #4
 8009684:	4798      	blx	r3
 8009686:	3601      	adds	r6, #1
 8009688:	e7ee      	b.n	8009668 <__libc_init_array+0xc>
 800968a:	f855 3b04 	ldr.w	r3, [r5], #4
 800968e:	4798      	blx	r3
 8009690:	3601      	adds	r6, #1
 8009692:	e7f2      	b.n	800967a <__libc_init_array+0x1e>
 8009694:	080096f8 	.word	0x080096f8
 8009698:	080096f8 	.word	0x080096f8
 800969c:	080096f8 	.word	0x080096f8
 80096a0:	080096fc 	.word	0x080096fc

080096a4 <memset>:
 80096a4:	4603      	mov	r3, r0
 80096a6:	4402      	add	r2, r0
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d100      	bne.n	80096ae <memset+0xa>
 80096ac:	4770      	bx	lr
 80096ae:	f803 1b01 	strb.w	r1, [r3], #1
 80096b2:	e7f9      	b.n	80096a8 <memset+0x4>

080096b4 <_init>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

080096c0 <_fini>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr
