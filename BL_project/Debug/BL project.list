
BL project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a1c  08002a1c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a1c  08002a1c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000007c  08002aa0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08002aa0  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006686  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6e  00000000  00000000  0002672b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  000282a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  00028a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017593  00000000  00000000  00029188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009788  00000000  00000000  0004071b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821f4  00000000  00000000  00049ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  000cc0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002854 	.word	0x08002854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08002854 	.word	0x08002854

0800014c <BL_UART_Fetch_Host_Command>:
    CBL_OTP_READ_CMD,
    CBL_CHANGE_ROP_Level_CMD
};
/* -----------------  Software Interfaces Definitions -----------------*/
BL_Status BL_UART_Fetch_Host_Command(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_Status status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t data_frame_len = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]
	/* Clear the Host Rx buffer */
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	482f      	ldr	r0, [pc, #188]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 8000164:	f001 fef4 	bl	8001f50 <memset>

	/* Listen to the UART serial port */
	/* Expected to receive the length of the Command frame [1 Byte] */
	HAL_status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	492c      	ldr	r1, [pc, #176]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 8000170:	482c      	ldr	r0, [pc, #176]	; (8000224 <BL_UART_Fetch_Host_Command+0xd8>)
 8000172:	f001 fd48 	bl	8001c06 <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if(HAL_status != HAL_OK){
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_UART_Fetch_Host_Command+0x3a>
		status = BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e046      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
	} else {
		data_frame_len = BL_Host_Buffer[0];
 8000186:	4b26      	ldr	r3, [pc, #152]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	717b      	strb	r3, [r7, #5]
		/* Listen to the command frame with the pre-defined length from the Host */
		HAL_status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], data_frame_len, HAL_MAX_DELAY);
 800018c:	797b      	ldrb	r3, [r7, #5]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	4924      	ldr	r1, [pc, #144]	; (8000228 <BL_UART_Fetch_Host_Command+0xdc>)
 8000196:	4823      	ldr	r0, [pc, #140]	; (8000224 <BL_UART_Fetch_Host_Command+0xd8>)
 8000198:	f001 fd35 	bl	8001c06 <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	71bb      	strb	r3, [r7, #6]
		if(HAL_status != HAL_OK){
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <BL_UART_Fetch_Host_Command+0x60>
			status = BL_NACK;
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e033      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
		} else {
			// check the received command code and execute its routine
			switch(BL_Host_Buffer[1]){
 80001ac:	4b1c      	ldr	r3, [pc, #112]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	3b10      	subs	r3, #16
 80001b2:	2b04      	cmp	r3, #4
 80001b4:	d82a      	bhi.n	800020c <BL_UART_Fetch_Host_Command+0xc0>
 80001b6:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <BL_UART_Fetch_Host_Command+0x70>)
 80001b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001bc:	080001d1 	.word	0x080001d1
 80001c0:	080001dd 	.word	0x080001dd
 80001c4:	080001e9 	.word	0x080001e9
 80001c8:	080001f5 	.word	0x080001f5
 80001cc:	08000201 	.word	0x08000201
				case CBL_GET_VER_CMD:
					Bootloader_Get_Version(BL_Host_Buffer);
 80001d0:	4813      	ldr	r0, [pc, #76]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 80001d2:	f000 f82d 	bl	8000230 <Bootloader_Get_Version>
					status = BL_OK;
 80001d6:	2301      	movs	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
					break;
 80001da:	e01b      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
				case CBL_GET_HELP_CMD:
					Bootloader_Get_Help(BL_Host_Buffer);
 80001dc:	4810      	ldr	r0, [pc, #64]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 80001de:	f000 f86b 	bl	80002b8 <Bootloader_Get_Help>
					status = BL_OK;
 80001e2:	2301      	movs	r3, #1
 80001e4:	71fb      	strb	r3, [r7, #7]
					break;
 80001e6:	e015      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 80001ea:	f000 f8a5 	bl	8000338 <Bootloader_Get_Chip_Identification_Number>
					status = BL_OK;
 80001ee:	2301      	movs	r3, #1
 80001f0:	71fb      	strb	r3, [r7, #7]
					break;
 80001f2:	e00f      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 80001f4:	480a      	ldr	r0, [pc, #40]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 80001f6:	f000 f8f7 	bl	80003e8 <Bootloader_Read_Protection_Level>
					status = BL_OK;
 80001fa:	2301      	movs	r3, #1
 80001fc:	71fb      	strb	r3, [r7, #7]
					break;
 80001fe:	e009      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 8000200:	4807      	ldr	r0, [pc, #28]	; (8000220 <BL_UART_Fetch_Host_Command+0xd4>)
 8000202:	f000 f933 	bl	800046c <Bootloader_Jump_To_Address>
					status = BL_OK;
 8000206:	2301      	movs	r3, #1
 8000208:	71fb      	strb	r3, [r7, #7]
					break;
 800020a:	e003      	b.n	8000214 <BL_UART_Fetch_Host_Command+0xc8>
				default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <BL_UART_Fetch_Host_Command+0xe0>)
 800020e:	f000 fa31 	bl	8000674 <BL_Print_Message>
					break;
 8000212:	bf00      	nop
			}
		}
	}


}
 8000214:	bf00      	nop
 8000216:	4618      	mov	r0, r3
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000098 	.word	0x20000098
 8000224:	200001b0 	.word	0x200001b0
 8000228:	20000099 	.word	0x20000099
 800022c:	0800286c 	.word	0x0800286c

08000230 <Bootloader_Get_Version>:
/* ----------------- Static Functions Definitions -----------------*/
static void Bootloader_Get_Version(uint8_t *Host_Buffer)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <Bootloader_Get_Version+0x78>)
 800023a:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc32 = 0; /* the attached crc to the frame end */
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
	CRC_Status crc_verf_status = CRC_VERIFICATION_FAILED;
 8000240:	2300      	movs	r3, #0
 8000242:	74fb      	strb	r3, [r7, #19]
	uint16_t Host_CMD_Packet_Len = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	823b      	strh	r3, [r7, #16]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the bootloader version from the MCU \r\n");
 8000248:	4818      	ldr	r0, [pc, #96]	; (80002ac <Bootloader_Get_Version+0x7c>)
 800024a:	f000 fa13 	bl	8000674 <BL_Print_Message>
#endif

	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	b29b      	uxth	r3, r3
 8000254:	3301      	adds	r3, #1
 8000256:	823b      	strh	r3, [r7, #16]
	/* CRC verification */
	host_crc32 = *((uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTES));
 8000258:	8a3b      	ldrh	r3, [r7, #16]
 800025a:	3b04      	subs	r3, #4
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4413      	add	r3, r2
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
	crc_verf_status = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, host_crc32);
 8000264:	8a3b      	ldrh	r3, [r7, #16]
 8000266:	3b04      	subs	r3, #4
 8000268:	697a      	ldr	r2, [r7, #20]
 800026a:	4619      	mov	r1, r3
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 f967 	bl	8000540 <Bootloader_CRC_Verify>
 8000272:	4603      	mov	r3, r0
 8000274:	74fb      	strb	r3, [r7, #19]

	if(crc_verf_status == CRC_VERIFICATION_PASSED) {
 8000276:	7cfb      	ldrb	r3, [r7, #19]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10c      	bne.n	8000296 <Bootloader_Get_Version+0x66>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Passed \r\n");
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <Bootloader_Get_Version+0x80>)
 800027e:	f000 f9f9 	bl	8000674 <BL_Print_Message>
#endif
	Bootloader_Send_ACK(4);
 8000282:	2004      	movs	r0, #4
 8000284:	f000 f9b6 	bl	80005f4 <Bootloader_Send_ACK>
	Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Version[0]), 4);
 8000288:	f107 030c 	add.w	r3, r7, #12
 800028c:	2104      	movs	r1, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f9dc 	bl	800064c <Bootloader_Send_Data_To_Host>
	Bootloader_Send_NACK();

	}


}
 8000294:	e004      	b.n	80002a0 <Bootloader_Get_Version+0x70>
	BL_Print_Message("CRC Verification Failed \r\n");
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <Bootloader_Get_Version+0x84>)
 8000298:	f000 f9ec 	bl	8000674 <BL_Print_Message>
	Bootloader_Send_NACK();
 800029c:	f000 f9c4 	bl	8000628 <Bootloader_Send_NACK>
}
 80002a0:	bf00      	nop
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	00010164 	.word	0x00010164
 80002ac:	0800289c 	.word	0x0800289c
 80002b0:	080028c8 	.word	0x080028c8
 80002b4:	080028e4 	.word	0x080028e4

080002b8 <Bootloader_Get_Help>:

static void Bootloader_Get_Help(uint8_t *Host_Buffer)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	uint32_t host_crc32 = 0; /* the attached crc to the frame end */
 80002c0:	2300      	movs	r3, #0
 80002c2:	60fb      	str	r3, [r7, #12]
	CRC_Status crc_verf_status = CRC_VERIFICATION_FAILED;
 80002c4:	2300      	movs	r3, #0
 80002c6:	72fb      	strb	r3, [r7, #11]
	uint16_t Host_CMD_Packet_Len = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	813b      	strh	r3, [r7, #8]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Get Help CMD ..... ! \r\n");
 80002cc:	4816      	ldr	r0, [pc, #88]	; (8000328 <Bootloader_Get_Help+0x70>)
 80002ce:	f000 f9d1 	bl	8000674 <BL_Print_Message>
#endif

	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	3301      	adds	r3, #1
 80002da:	813b      	strh	r3, [r7, #8]
	/* CRC verification */
	host_crc32 = *((uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTES));
 80002dc:	893b      	ldrh	r3, [r7, #8]
 80002de:	3b04      	subs	r3, #4
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	4413      	add	r3, r2
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	60fb      	str	r3, [r7, #12]
	crc_verf_status = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, host_crc32);
 80002e8:	893b      	ldrh	r3, [r7, #8]
 80002ea:	3b04      	subs	r3, #4
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	4619      	mov	r1, r3
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f925 	bl	8000540 <Bootloader_CRC_Verify>
 80002f6:	4603      	mov	r3, r0
 80002f8:	72fb      	strb	r3, [r7, #11]

	if(crc_verf_status == CRC_VERIFICATION_PASSED) {
 80002fa:	7afb      	ldrb	r3, [r7, #11]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d10a      	bne.n	8000316 <Bootloader_Get_Help+0x5e>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Passed \r\n");
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <Bootloader_Get_Help+0x74>)
 8000302:	f000 f9b7 	bl	8000674 <BL_Print_Message>
#endif
	Bootloader_Send_ACK(12);
 8000306:	200c      	movs	r0, #12
 8000308:	f000 f974 	bl	80005f4 <Bootloader_Send_ACK>
	Bootloader_Send_Data_To_Host((uint8_t *)(&Bootloader_Supported_CMDs[0]), 12);
 800030c:	210c      	movs	r1, #12
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <Bootloader_Get_Help+0x78>)
 8000310:	f000 f99c 	bl	800064c <Bootloader_Send_Data_To_Host>
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();

	}
}
 8000314:	e004      	b.n	8000320 <Bootloader_Get_Help+0x68>
	BL_Print_Message("CRC Verification Failed \r\n");
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <Bootloader_Get_Help+0x7c>)
 8000318:	f000 f9ac 	bl	8000674 <BL_Print_Message>
	Bootloader_Send_NACK();
 800031c:	f000 f984 	bl	8000628 <Bootloader_Send_NACK>
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	08002900 	.word	0x08002900
 800032c:	080028c8 	.word	0x080028c8
 8000330:	20000000 	.word	0x20000000
 8000334:	080028e4 	.word	0x080028e4

08000338 <Bootloader_Get_Chip_Identification_Number>:

static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint32_t host_crc32 = 0; /* the attached crc to the frame end */
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
	CRC_Status crc_verf_status = CRC_VERIFICATION_FAILED;
 8000344:	2300      	movs	r3, #0
 8000346:	74fb      	strb	r3, [r7, #19]
	uint16_t Host_CMD_Packet_Len = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	823b      	strh	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Get_Chip_Identification_Number..! \r\n");
 8000350:	481b      	ldr	r0, [pc, #108]	; (80003c0 <Bootloader_Get_Chip_Identification_Number+0x88>)
 8000352:	f000 f98f 	bl	8000674 <BL_Print_Message>
#endif

	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b29b      	uxth	r3, r3
 800035c:	3301      	adds	r3, #1
 800035e:	823b      	strh	r3, [r7, #16]
	/* CRC verification */
	host_crc32 = *((uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTES));
 8000360:	8a3b      	ldrh	r3, [r7, #16]
 8000362:	3b04      	subs	r3, #4
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	617b      	str	r3, [r7, #20]
	crc_verf_status = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, host_crc32);
 800036c:	8a3b      	ldrh	r3, [r7, #16]
 800036e:	3b04      	subs	r3, #4
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f8e3 	bl	8000540 <Bootloader_CRC_Verify>
 800037a:	4603      	mov	r3, r0
 800037c:	74fb      	strb	r3, [r7, #19]

	if(crc_verf_status == CRC_VERIFICATION_PASSED) {
 800037e:	7cfb      	ldrb	r3, [r7, #19]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d113      	bne.n	80003ac <Bootloader_Get_Chip_Identification_Number+0x74>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Passed \r\n");
 8000384:	480f      	ldr	r0, [pc, #60]	; (80003c4 <Bootloader_Get_Chip_Identification_Number+0x8c>)
 8000386:	f000 f975 	bl	8000674 <BL_Print_Message>
#endif
	/* Get the MCU chip identification number */
	MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <Bootloader_Get_Chip_Identification_Number+0x90>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	b29b      	uxth	r3, r3
 8000390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000394:	b29b      	uxth	r3, r3
 8000396:	81fb      	strh	r3, [r7, #14]
	Bootloader_Send_ACK(2);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 f92b 	bl	80005f4 <Bootloader_Send_ACK>
	Bootloader_Send_Data_To_Host((uint8_t *)(&MCU_Identification_Number), 2);
 800039e:	f107 030e 	add.w	r3, r7, #14
 80003a2:	2102      	movs	r1, #2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f951 	bl	800064c <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}
}
 80003aa:	e004      	b.n	80003b6 <Bootloader_Get_Chip_Identification_Number+0x7e>
	BL_Print_Message("CRC Verification Failed \r\n");
 80003ac:	4807      	ldr	r0, [pc, #28]	; (80003cc <Bootloader_Get_Chip_Identification_Number+0x94>)
 80003ae:	f000 f961 	bl	8000674 <BL_Print_Message>
	Bootloader_Send_NACK();
 80003b2:	f000 f939 	bl	8000628 <Bootloader_Send_NACK>
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	08002918 	.word	0x08002918
 80003c4:	080028c8 	.word	0x080028c8
 80003c8:	e0042000 	.word	0xe0042000
 80003cc:	080028e4 	.word	0x080028e4

080003d0 <CBL_STM32F103_Get_RDP_Level>:

static uint8_t CBL_STM32F103_Get_RDP_Level(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fd44 	bl	8000e66 <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 80003de:	7d3b      	ldrb	r3, [r7, #20]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	73fb      	strb	r3, [r7, #15]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
 80003fc:	4818      	ldr	r0, [pc, #96]	; (8000460 <Bootloader_Read_Protection_Level+0x78>)
 80003fe:	f000 f939 	bl	8000674 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b29b      	uxth	r3, r3
 8000408:	3301      	adds	r3, #1
 800040a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800040c:	8afb      	ldrh	r3, [r7, #22]
 800040e:	3b04      	subs	r3, #4
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000418:	8afb      	ldrh	r3, [r7, #22]
 800041a:	3b04      	subs	r3, #4
 800041c:	693a      	ldr	r2, [r7, #16]
 800041e:	4619      	mov	r1, r3
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f88d 	bl	8000540 <Bootloader_CRC_Verify>
 8000426:	4603      	mov	r3, r0
 8000428:	2b01      	cmp	r3, #1
 800042a:	d110      	bne.n	800044e <Bootloader_Read_Protection_Level+0x66>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <Bootloader_Read_Protection_Level+0x7c>)
 800042e:	f000 f921 	bl	8000674 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f000 f8de 	bl	80005f4 <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F103_Get_RDP_Level();
 8000438:	f7ff ffca 	bl	80003d0 <CBL_STM32F103_Get_RDP_Level>
 800043c:	4603      	mov	r3, r0
 800043e:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 8000440:	f107 030f 	add.w	r3, r7, #15
 8000444:	2101      	movs	r1, #1
 8000446:	4618      	mov	r0, r3
 8000448:	f000 f900 	bl	800064c <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 800044c:	e004      	b.n	8000458 <Bootloader_Read_Protection_Level+0x70>
		BL_Print_Message("CRC Verification Failed \r\n");
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <Bootloader_Read_Protection_Level+0x80>)
 8000450:	f000 f910 	bl	8000674 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000454:	f000 f8e8 	bl	8000628 <Bootloader_Send_NACK>
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	08002940 	.word	0x08002940
 8000464:	080028c8 	.word	0x080028c8
 8000468:	080028e4 	.word	0x080028e4

0800046c <Bootloader_Jump_To_Address>:

void Bootloader_Jump_To_Address(uint8_t *Host_Buffer)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	uint32_t host_crc32 = 0; /* the attached crc to the frame end */
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
	CRC_Status crc_verf_status = CRC_VERIFICATION_FAILED;
 8000478:	2300      	movs	r3, #0
 800047a:	76fb      	strb	r3, [r7, #27]
	uint16_t Host_CMD_Packet_Len = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	833b      	strh	r3, [r7, #24]
	uint32_t host_jump_address = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000484:	2300      	movs	r3, #0
 8000486:	72fb      	strb	r3, [r7, #11]
	void (*func_jump_ptr) (void) = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]

#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Jump to address CMD..! \r\n");
 800048c:	4827      	ldr	r0, [pc, #156]	; (800052c <Bootloader_Jump_To_Address+0xc0>)
 800048e:	f000 f8f1 	bl	8000674 <BL_Print_Message>
#endif
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	3301      	adds	r3, #1
 800049a:	833b      	strh	r3, [r7, #24]
	/* CRC verification */
	host_crc32 = *((uint32_t *)(Host_Buffer + Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTES));
 800049c:	8b3b      	ldrh	r3, [r7, #24]
 800049e:	3b04      	subs	r3, #4
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	61fb      	str	r3, [r7, #28]
	crc_verf_status = Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, host_crc32);
 80004a8:	8b3b      	ldrh	r3, [r7, #24]
 80004aa:	3b04      	subs	r3, #4
 80004ac:	69fa      	ldr	r2, [r7, #28]
 80004ae:	4619      	mov	r1, r3
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f000 f845 	bl	8000540 <Bootloader_CRC_Verify>
 80004b6:	4603      	mov	r3, r0
 80004b8:	76fb      	strb	r3, [r7, #27]

	if(crc_verf_status == CRC_VERIFICATION_PASSED) {
 80004ba:	7efb      	ldrb	r3, [r7, #27]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d12b      	bne.n	8000518 <Bootloader_Jump_To_Address+0xac>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Passed \r\n");
 80004c0:	481b      	ldr	r0, [pc, #108]	; (8000530 <Bootloader_Jump_To_Address+0xc4>)
 80004c2:	f000 f8d7 	bl	8000674 <BL_Print_Message>
#endif
	Bootloader_Send_ACK(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 f894 	bl	80005f4 <Bootloader_Send_ACK>
	/* Jump to address Execution */
	host_jump_address = *((uint32_t *)&Host_Buffer[2]);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80004d2:	617b      	str	r3, [r7, #20]
	Address_Verification = Host_Address_Verification(host_jump_address);
 80004d4:	6978      	ldr	r0, [r7, #20]
 80004d6:	f000 f871 	bl	80005bc <Host_Address_Verification>
 80004da:	4603      	mov	r3, r0
 80004dc:	72fb      	strb	r3, [r7, #11]

	if(ADDRESS_IS_VALID == Address_Verification){
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d112      	bne.n	800050a <Bootloader_Jump_To_Address+0x9e>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Address verification succeeded \r\n");
 80004e4:	4813      	ldr	r0, [pc, #76]	; (8000534 <Bootloader_Jump_To_Address+0xc8>)
 80004e6:	f000 f8c5 	bl	8000674 <BL_Print_Message>
#endif
		/* Report address verification succeeded */
		Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 80004ea:	f107 030b 	add.w	r3, r7, #11
 80004ee:	2101      	movs	r1, #1
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f8ab 	bl	800064c <Bootloader_Send_Data_To_Host>
		/* Prepare the address to jump */
		Jump_Ptr Jump_Address = (Jump_Ptr)(host_jump_address + 1);
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Jump to : 0x%X \r\n", Jump_Address);
 80004fc:	68f9      	ldr	r1, [r7, #12]
 80004fe:	480e      	ldr	r0, [pc, #56]	; (8000538 <Bootloader_Jump_To_Address+0xcc>)
 8000500:	f000 f8b8 	bl	8000674 <BL_Print_Message>
#endif
		Jump_Address();
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}
}
 8000508:	e00b      	b.n	8000522 <Bootloader_Jump_To_Address+0xb6>
		Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 800050a:	f107 030b 	add.w	r3, r7, #11
 800050e:	2101      	movs	r1, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f89b 	bl	800064c <Bootloader_Send_Data_To_Host>
}
 8000516:	e004      	b.n	8000522 <Bootloader_Jump_To_Address+0xb6>
	BL_Print_Message("CRC Verification Failed \r\n");
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <Bootloader_Jump_To_Address+0xd0>)
 800051a:	f000 f8ab 	bl	8000674 <BL_Print_Message>
	Bootloader_Send_NACK();
 800051e:	f000 f883 	bl	8000628 <Bootloader_Send_NACK>
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	0800296c 	.word	0x0800296c
 8000530:	080028c8 	.word	0x080028c8
 8000534:	08002988 	.word	0x08002988
 8000538:	080029ac 	.word	0x080029ac
 800053c:	080028e4 	.word	0x080028e4

08000540 <Bootloader_CRC_Verify>:
/* ----------------- Helper Functions Definitions -----------------*/
static CRC_Status Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	CRC_Status crc_verf_status = CRC_VERIFICATION_FAILED;
 800054c:	2300      	movs	r3, #0
 800054e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 800055c:	2300      	movs	r3, #0
 800055e:	75fb      	strb	r3, [r7, #23]
 8000560:	e00f      	b.n	8000582 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2201      	movs	r2, #1
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <Bootloader_CRC_Verify+0x78>)
 8000576:	f000 fc4c 	bl	8000e12 <HAL_CRC_Accumulate>
 800057a:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	3301      	adds	r3, #1
 8000580:	75fb      	strb	r3, [r7, #23]
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	429a      	cmp	r2, r3
 8000588:	d8eb      	bhi.n	8000562 <Bootloader_CRC_Verify+0x22>
	}

	/* Reset the CRC Calculation Unit */
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <Bootloader_CRC_Verify+0x78>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <Bootloader_CRC_Verify+0x78>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f042 0201 	orr.w	r2, r2, #1
 8000598:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 800059a:	69ba      	ldr	r2, [r7, #24]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d102      	bne.n	80005a8 <Bootloader_CRC_Verify+0x68>
		crc_verf_status = CRC_VERIFICATION_PASSED;
 80005a2:	2301      	movs	r3, #1
 80005a4:	77fb      	strb	r3, [r7, #31]
 80005a6:	e001      	b.n	80005ac <Bootloader_CRC_Verify+0x6c>
	}
	else{
		crc_verf_status = CRC_VERIFICATION_FAILED;
 80005a8:	2300      	movs	r3, #0
 80005aa:	77fb      	strb	r3, [r7, #31]
	}

	return crc_verf_status;
 80005ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000160 	.word	0x20000160

080005bc <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= FLASH_BASE) && (Jump_Address <= FLASH_BANK1_END)){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005ce:	d306      	bcc.n	80005de <Host_Address_Verification+0x22>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <Host_Address_Verification+0x34>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d802      	bhi.n	80005de <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80005d8:	2301      	movs	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	e001      	b.n	80005e2 <Host_Address_Verification+0x26>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 80005de:	2300      	movs	r3, #0
 80005e0:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	0801ffff 	.word	0x0801ffff

080005f4 <Bootloader_Send_ACK>:

static void Bootloader_Send_ACK(uint8_t Reply_Len){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 80005fe:	2300      	movs	r3, #0
 8000600:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 8000602:	23cd      	movs	r3, #205	; 0xcd
 8000604:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Reply_Len;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 800060a:	f107 010c 	add.w	r1, r7, #12
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2202      	movs	r2, #2
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <Bootloader_Send_ACK+0x30>)
 8000616:	f001 fa64 	bl	8001ae2 <HAL_UART_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001b0 	.word	0x200001b0

08000628 <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800062e:	23ab      	movs	r3, #171	; 0xab
 8000630:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 8000632:	1df9      	adds	r1, r7, #7
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2201      	movs	r2, #1
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <Bootloader_Send_NACK+0x20>)
 800063c:	f001 fa51 	bl	8001ae2 <HAL_UART_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200001b0 	.word	0x200001b0

0800064c <Bootloader_Send_Data_To_Host>:


static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b29a      	uxth	r2, r3
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <Bootloader_Send_Data_To_Host+0x24>)
 8000662:	f001 fa3e 	bl	8001ae2 <HAL_UART_Transmit>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001b0 	.word	0x200001b0

08000674 <BL_Print_Message>:

void BL_Print_Message(char *format, ...){
 8000674:	b40f      	push	{r0, r1, r2, r3}
 8000676:	b580      	push	{r7, lr}
 8000678:	b09a      	sub	sp, #104	; 0x68
 800067a:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2260      	movs	r2, #96	; 0x60
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fc61 	bl	8001f50 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 800068e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000692:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc76 	bl	8001f8c <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	2264      	movs	r2, #100	; 0x64
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <BL_Print_Message+0x48>)
 80006aa:	f001 fa1a 	bl	8001ae2 <HAL_UART_Transmit>
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80006ae:	bf00      	nop
 80006b0:	3768      	adds	r7, #104	; 0x68
 80006b2:	46bd      	mov	sp, r7
 80006b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006b8:	b004      	add	sp, #16
 80006ba:	4770      	bx	lr
 80006bc:	2000016c 	.word	0x2000016c

080006c0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_CRC_Init+0x20>)
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <MX_CRC_Init+0x24>)
 80006c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_CRC_Init+0x20>)
 80006cc:	f000 fb85 	bl	8000dda <HAL_CRC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006d6:	f000 f8b0 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000160 	.word	0x20000160
 80006e4:	40023000 	.word	0x40023000

080006e8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a09      	ldr	r2, [pc, #36]	; (800071c <HAL_CRC_MspInit+0x34>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d10b      	bne.n	8000712 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_CRC_MspInit+0x38>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_CRC_MspInit+0x38>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000704:	6153      	str	r3, [r2, #20]
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_CRC_MspInit+0x38>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40023000 	.word	0x40023000
 8000720:	40021000 	.word	0x40021000

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_GPIO_Init+0x58>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_GPIO_Init+0x58>)
 8000730:	f043 0320 	orr.w	r3, r3, #32
 8000734:	6193      	str	r3, [r2, #24]
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_GPIO_Init+0x58>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f003 0320 	and.w	r3, r3, #32
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x58>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <MX_GPIO_Init+0x58>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_GPIO_Init+0x58>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_GPIO_Init+0x58>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <MX_GPIO_Init+0x58>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_GPIO_Init+0x58>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 f9e3 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f811 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff ffc9 	bl	8000724 <MX_GPIO_Init>
  MX_CRC_Init();
 8000792:	f7ff ff95 	bl	80006c0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000796:	f000 f8db 	bl	8000950 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f903 	bl	80009a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
  BL_Status Status = BL_NACK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71bb      	strb	r3, [r7, #6]
//	  }
//	  HAL_Status = HAL_UART_Transmit(&huart3, msg, sizeof(msg), HAL_MAX_DELAY);
//	  HAL_Delay(500);
//	  HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
    /* USER CODE BEGIN 3 */
	  Status = BL_UART_Fetch_Host_Command();
 80007a6:	f7ff fcd1 	bl	800014c <BL_UART_Fetch_Host_Command>
 80007aa:	4603      	mov	r3, r0
 80007ac:	71bb      	strb	r3, [r7, #6]
 80007ae:	e7fa      	b.n	80007a6 <main+0x26>

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b090      	sub	sp, #64	; 0x40
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fbc6 	bl	8001f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fd0b 	bl	8001214 <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000804:	f000 f819 	bl	800083a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f000 ff78 	bl	8001718 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800082e:	f000 f804 	bl	800083a <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3740      	adds	r7, #64	; 0x40
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083e:	b672      	cpsid	i
}
 8000840:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_MspInit+0x40>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_MspInit+0x40>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_MspInit+0x40>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_MspInit+0x40>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_MspInit+0x40>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_MspInit+0x40>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f985 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	; (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f001 faf8 	bl	8001efc <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20005000 	.word	0x20005000
 8000938:	00000400 	.word	0x00000400
 800093c:	20000168 	.word	0x20000168
 8000940:	20000208 	.word	0x20000208

08000944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f001 f85e 	bl	8001a48 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f7ff ff52 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000016c 	.word	0x2000016c
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <MX_USART3_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USART3_UART_Init+0x4c>)
 80009dc:	f001 f834 	bl	8001a48 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f7ff ff28 	bl	800083a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001b0 	.word	0x200001b0
 80009f4:	40004800 	.word	0x40004800

080009f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <HAL_UART_MspInit+0xf8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d130      	bne.n	8000a7a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	4a35      	ldr	r2, [pc, #212]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a22:	61d3      	str	r3, [r2, #28]
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0318 	add.w	r3, r7, #24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4827      	ldr	r0, [pc, #156]	; (8000af8 <HAL_UART_MspInit+0x100>)
 8000a5c:	f000 fa56 	bl	8000f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a60:	2308      	movs	r3, #8
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4821      	ldr	r0, [pc, #132]	; (8000af8 <HAL_UART_MspInit+0x100>)
 8000a74:	f000 fa4a 	bl	8000f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a78:	e036      	b.n	8000ae8 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <HAL_UART_MspInit+0x104>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d131      	bne.n	8000ae8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a86:	69db      	ldr	r3, [r3, #28]
 8000a88:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8e:	61d3      	str	r3, [r2, #28]
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0xfc>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <HAL_UART_MspInit+0x108>)
 8000aca:	f000 fa1f 	bl	8000f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <HAL_UART_MspInit+0x108>)
 8000ae4:	f000 fa12 	bl	8000f0c <HAL_GPIO_Init>
}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40004800 	.word	0x40004800
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b2a:	f7ff ff0b 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f001 f9eb 	bl	8001f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b32:	f7ff fe25 	bl	8000780 <main>
  bx lr
 8000b36:	4770      	bx	lr
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000b40:	08002a24 	.word	0x08002a24
  ldr r2, =_sbss
 8000b44:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000b48:	20000208 	.word	0x20000208

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x28>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x28>)
 8000b5a:	f043 0310 	orr.w	r3, r3, #16
 8000b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f907 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fe6a 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f911 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f8e7 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000000c 	.word	0x2000000c
 8000bd4:	20000014 	.word	0x20000014
 8000bd8:	20000010 	.word	0x20000010

08000bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x1c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_IncTick+0x20>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x20>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000014 	.word	0x20000014
 8000bfc:	200001f4 	.word	0x200001f4

08000c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <HAL_GetTick+0x10>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	200001f4 	.word	0x200001f4

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	; (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff90 	bl	8000c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff49 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff5e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff90 	bl	8000ccc <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5f 	bl	8000c78 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffb0 	bl	8000d30 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e00e      	b.n	8000e0a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d105      	bne.n	8000e02 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fc73 	bl	80006e8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b087      	sub	sp, #28
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2202      	movs	r2, #2
 8000e26:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	e00a      	b.n	8000e44 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	441a      	add	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d3f0      	bcc.n	8000e2e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000e5a:	693b      	ldr	r3, [r7, #16]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 8000e74:	f000 f814 	bl	8000ea0 <FLASH_OB_GetWRP>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8000e7e:	f000 f819 	bl	8000eb4 <FLASH_OB_GetRDP>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	741a      	strb	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000e8a:	f000 f82f 	bl	8000eec <FLASH_OB_GetUser>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	745a      	strb	r2, [r3, #17]
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <FLASH_OB_GetWRP+0x10>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <FLASH_OB_GetRDP>:
  *         This parameter can be one of the following values:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
  uint32_t readstatus = OB_RDP_LEVEL_0;
 8000eba:	23a5      	movs	r3, #165	; 0xa5
 8000ebc:	607b      	str	r3, [r7, #4]
  uint32_t tmp_reg = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, FLASH_OBR_RDPRT);
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <FLASH_OB_GetRDP+0x34>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	603b      	str	r3, [r7, #0]

  if (tmp_reg == FLASH_OBR_RDPRT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d102      	bne.n	8000ed8 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = OB_RDP_LEVEL_1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	e001      	b.n	8000edc <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_0;
 8000ed8:	23a5      	movs	r3, #165	; 0xa5
 8000eda:	607b      	str	r3, [r7, #4]
  }

  return readstatus;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40022000 	.word	0x40022000

08000eec <FLASH_OB_GetUser>:
  * @retval The FLASH User Option Bytes values: FLASH_OBR_IWDG_SW(Bit2), 
  *         FLASH_OBR_nRST_STOP(Bit3),FLASH_OBR_nRST_STDBY(Bit4).
  *         And FLASH_OBR_BFB2(Bit5) for STM32F101xG and STM32F103xG . 
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <FLASH_OB_GetUser+0x1c>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1e:	e169      	b.n	80011f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f20:	2201      	movs	r2, #1
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8158 	bne.w	80011ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a9a      	ldr	r2, [pc, #616]	; (80011ac <HAL_GPIO_Init+0x2a0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d05e      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f48:	4a98      	ldr	r2, [pc, #608]	; (80011ac <HAL_GPIO_Init+0x2a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d875      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f4e:	4a98      	ldr	r2, [pc, #608]	; (80011b0 <HAL_GPIO_Init+0x2a4>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d058      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f54:	4a96      	ldr	r2, [pc, #600]	; (80011b0 <HAL_GPIO_Init+0x2a4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d86f      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f5a:	4a96      	ldr	r2, [pc, #600]	; (80011b4 <HAL_GPIO_Init+0x2a8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d052      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f60:	4a94      	ldr	r2, [pc, #592]	; (80011b4 <HAL_GPIO_Init+0x2a8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d869      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f66:	4a94      	ldr	r2, [pc, #592]	; (80011b8 <HAL_GPIO_Init+0x2ac>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d04c      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f6c:	4a92      	ldr	r2, [pc, #584]	; (80011b8 <HAL_GPIO_Init+0x2ac>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d863      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f72:	4a92      	ldr	r2, [pc, #584]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d046      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
 8000f78:	4a90      	ldr	r2, [pc, #576]	; (80011bc <HAL_GPIO_Init+0x2b0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d85d      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d82a      	bhi.n	8000fd8 <HAL_GPIO_Init+0xcc>
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d859      	bhi.n	800103a <HAL_GPIO_Init+0x12e>
 8000f86:	a201      	add	r2, pc, #4	; (adr r2, 8000f8c <HAL_GPIO_Init+0x80>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08001007 	.word	0x08001007
 8000f90:	08000fe1 	.word	0x08000fe1
 8000f94:	08000ff3 	.word	0x08000ff3
 8000f98:	08001035 	.word	0x08001035
 8000f9c:	0800103b 	.word	0x0800103b
 8000fa0:	0800103b 	.word	0x0800103b
 8000fa4:	0800103b 	.word	0x0800103b
 8000fa8:	0800103b 	.word	0x0800103b
 8000fac:	0800103b 	.word	0x0800103b
 8000fb0:	0800103b 	.word	0x0800103b
 8000fb4:	0800103b 	.word	0x0800103b
 8000fb8:	0800103b 	.word	0x0800103b
 8000fbc:	0800103b 	.word	0x0800103b
 8000fc0:	0800103b 	.word	0x0800103b
 8000fc4:	0800103b 	.word	0x0800103b
 8000fc8:	0800103b 	.word	0x0800103b
 8000fcc:	0800103b 	.word	0x0800103b
 8000fd0:	08000fe9 	.word	0x08000fe9
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	4a79      	ldr	r2, [pc, #484]	; (80011c0 <HAL_GPIO_Init+0x2b4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fde:	e02c      	b.n	800103a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e029      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	3304      	adds	r3, #4
 8000fee:	623b      	str	r3, [r7, #32]
          break;
 8000ff0:	e024      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e01f      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	330c      	adds	r3, #12
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e01a      	b.n	800103c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800100e:	2304      	movs	r3, #4
 8001010:	623b      	str	r3, [r7, #32]
          break;
 8001012:	e013      	b.n	800103c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d105      	bne.n	8001028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800101c:	2308      	movs	r3, #8
 800101e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69fa      	ldr	r2, [r7, #28]
 8001024:	611a      	str	r2, [r3, #16]
          break;
 8001026:	e009      	b.n	800103c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001028:	2308      	movs	r3, #8
 800102a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	615a      	str	r2, [r3, #20]
          break;
 8001032:	e003      	b.n	800103c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x130>
          break;
 800103a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2bff      	cmp	r3, #255	; 0xff
 8001040:	d801      	bhi.n	8001046 <HAL_GPIO_Init+0x13a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	e001      	b.n	800104a <HAL_GPIO_Init+0x13e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d802      	bhi.n	8001058 <HAL_GPIO_Init+0x14c>
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x152>
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	3b08      	subs	r3, #8
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	210f      	movs	r1, #15
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	6a39      	ldr	r1, [r7, #32]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80b1 	beq.w	80011ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800108c:	4b4d      	ldr	r3, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_GPIO_Init+0x2b8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2bc>)
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_GPIO_Init+0x2c0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d013      	beq.n	80010f8 <HAL_GPIO_Init+0x1ec>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <HAL_GPIO_Init+0x2c4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d00d      	beq.n	80010f4 <HAL_GPIO_Init+0x1e8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <HAL_GPIO_Init+0x2c8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1e4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <HAL_GPIO_Init+0x2cc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_GPIO_Init+0x1e0>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010ec:	2304      	movs	r3, #4
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_Init+0x1ee>
 80010f8:	2300      	movs	r3, #0
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4093      	lsls	r3, r2
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800110a:	492f      	ldr	r1, [pc, #188]	; (80011c8 <HAL_GPIO_Init+0x2bc>)
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	492c      	ldr	r1, [pc, #176]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	4928      	ldr	r1, [pc, #160]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800113c:	4013      	ands	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4922      	ldr	r1, [pc, #136]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	491e      	ldr	r1, [pc, #120]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	4918      	ldr	r1, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	4914      	ldr	r1, [pc, #80]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800118c:	4013      	ands	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d021      	beq.n	80011e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	490e      	ldr	r1, [pc, #56]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
 80011a8:	e021      	b.n	80011ee <HAL_GPIO_Init+0x2e2>
 80011aa:	bf00      	nop
 80011ac:	10320000 	.word	0x10320000
 80011b0:	10310000 	.word	0x10310000
 80011b4:	10220000 	.word	0x10220000
 80011b8:	10210000 	.word	0x10210000
 80011bc:	10120000 	.word	0x10120000
 80011c0:	10110000 	.word	0x10110000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40011400 	.word	0x40011400
 80011dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4909      	ldr	r1, [pc, #36]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	3301      	adds	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae8e 	bne.w	8000f20 <HAL_GPIO_Init+0x14>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	372c      	adds	r7, #44	; 0x2c
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e272      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00c      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d112      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06c      	beq.n	8001340 <HAL_RCC_OscConfig+0x12c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d168      	bne.n	8001340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e24c      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x76>
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e02e      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc86 	bl	8000c00 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fc82 	bl	8000c00 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e200      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe4>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc72 	bl	8000c00 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc6e 	bl	8000c00 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1ec      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x10c>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c0      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4939      	ldr	r1, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc27 	bl	8000c00 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc23 	bl	8000c00 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a1      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc06 	bl	8000c00 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc02 	bl	8000c00 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e180      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03a      	beq.n	8001498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fbe6 	bl	8000c00 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fbe2 	bl	8000c00 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e160      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 fad8 	bl	8001a0c <RCC_Delay>
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fbcc 	bl	8000c00 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fbc8 	bl	8000c00 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e146      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	42420000 	.word	0x42420000
 8001488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a6 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a87      	ldr	r2, [pc, #540]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fb89 	bl	8000c00 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff fb85 	bl	8000c00 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e103      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 8001518:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x334>
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x356>
 8001550:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a5d      	ldr	r2, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 800156a:	4b5b      	ldr	r3, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a5a      	ldr	r2, [pc, #360]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb39 	bl	8000c00 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb35 	bl	8000c00 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0b1      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x37e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb23 	bl	8000c00 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb1f 	bl	8000c00 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e09b      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8087 	beq.w	800170a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d061      	beq.n	80016cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d146      	bne.n	800169e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff faf3 	bl	8000c00 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff faef 	bl	8000c00 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e06d      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4921      	ldr	r1, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a19      	ldr	r1, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	430b      	orrs	r3, r1
 800166a:	491b      	ldr	r1, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fac3 	bl	8000c00 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fabf 	bl	8000c00 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e03d      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
 800169c:	e035      	b.n	800170a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff faac 	bl	8000c00 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff faa8 	bl	8000c00 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e026      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x498>
 80016ca:	e01e      	b.n	800170a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e019      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_OscConfig+0x500>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0d0      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4965      	ldr	r1, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d040      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e073      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06b      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4936      	ldr	r1, [pc, #216]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff f9fa 	bl	8000c00 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff f9f6 	bl	8000c00 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e053      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d210      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1cc>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1d0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f958 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	080029d0 	.word	0x080029d0
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000010 	.word	0x20000010

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b490      	push	{r4, r7}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_RCC_GetSysClockFreq+0xac>)
 80018f4:	1d3c      	adds	r4, r7, #4
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018fc:	f240 2301 	movw	r3, #513	; 0x201
 8001900:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x40>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x46>
 800192a:	e02b      	b.n	8001984 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800192e:	623b      	str	r3, [r7, #32]
      break;
 8001930:	e02b      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3328      	adds	r3, #40	; 0x28
 800193c:	443b      	add	r3, r7
 800193e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001942:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d012      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0c5b      	lsrs	r3, r3, #17
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	443b      	add	r3, r7
 800195c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001960:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001966:	fb03 f202 	mul.w	r2, r3, r2
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e004      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	623b      	str	r3, [r7, #32]
      break;
 8001982:	e002      	b.n	800198a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001986:	623b      	str	r3, [r7, #32]
      break;
 8001988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800198a:	6a3b      	ldr	r3, [r7, #32]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	080029c0 	.word	0x080029c0
 800199c:	40021000 	.word	0x40021000
 80019a0:	007a1200 	.word	0x007a1200
 80019a4:	003d0900 	.word	0x003d0900

080019a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	2000000c 	.word	0x2000000c

080019bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019c0:	f7ff fff2 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4903      	ldr	r1, [pc, #12]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	080029e0 	.word	0x080029e0

080019e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_RCC_GetHCLKFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	0adb      	lsrs	r3, r3, #11
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4903      	ldr	r1, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	080029e0 	.word	0x080029e0

08001a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <RCC_Delay+0x34>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <RCC_Delay+0x38>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a28:	bf00      	nop
  }
  while (Delay --);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <RCC_Delay+0x1c>
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	10624dd3 	.word	0x10624dd3

08001a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e03f      	b.n	8001ada <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7fe ffc2 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f9a7 	bl	8001de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b08a      	sub	sp, #40	; 0x28
 8001ae6:	af02      	add	r7, sp, #8
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d17c      	bne.n	8001bfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_UART_Transmit+0x2c>
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e075      	b.n	8001bfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_UART_Transmit+0x3e>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e06e      	b.n	8001bfe <HAL_UART_Transmit+0x11c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f863 	bl	8000c00 <HAL_GetTick>
 8001b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b50:	d108      	bne.n	8001b64 <HAL_UART_Transmit+0x82>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e003      	b.n	8001b6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b74:	e02a      	b.n	8001bcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f8e2 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e036      	b.n	8001bfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10b      	bne.n	8001bae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e007      	b.n	8001bbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1cf      	bne.n	8001b76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f8b2 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e006      	b.n	8001bfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08a      	sub	sp, #40	; 0x28
 8001c0a:	af02      	add	r7, sp, #8
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	f040 808c 	bne.w	8001d40 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_UART_Receive+0x2e>
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e084      	b.n	8001d42 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Receive+0x40>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e07d      	b.n	8001d42 <HAL_UART_Receive+0x13c>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2222      	movs	r2, #34	; 0x22
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c62:	f7fe ffcd 	bl	8000c00 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d108      	bne.n	8001c90 <HAL_UART_Receive+0x8a>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e003      	b.n	8001c98 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ca0:	e043      	b.n	8001d2a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2120      	movs	r1, #32
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f84c 	bl	8001d4a <UART_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e042      	b.n	8001d42 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	e01f      	b.n	8001d1c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce4:	d007      	beq.n	8001cf6 <HAL_UART_Receive+0xf0>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10a      	bne.n	8001d04 <HAL_UART_Receive+0xfe>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e008      	b.n	8001d16 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b6      	bne.n	8001ca2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d40:	2302      	movs	r3, #2
  }
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3720      	adds	r7, #32
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5a:	e02c      	b.n	8001db6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d028      	beq.n	8001db6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d6a:	f7fe ff49 	bl	8000c00 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d21d      	bcs.n	8001db6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0c3      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e1a:	f023 030c 	bic.w	r3, r3, #12
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2c      	ldr	r2, [pc, #176]	; (8001ef4 <UART_SetConfig+0x114>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d103      	bne.n	8001e50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e48:	f7ff fdcc 	bl	80019e4 <HAL_RCC_GetPCLK2Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	e002      	b.n	8001e56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e50:	f7ff fdb4 	bl	80019bc <HAL_RCC_GetPCLK1Freq>
 8001e54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <UART_SetConfig+0x118>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	0119      	lsls	r1, r3, #4
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009a      	lsls	r2, r3, #2
 8001e80:	441a      	add	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <UART_SetConfig+0x118>)
 8001e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2064      	movs	r0, #100	; 0x64
 8001e96:	fb00 f303 	mul.w	r3, r0, r3
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	3332      	adds	r3, #50	; 0x32
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <UART_SetConfig+0x118>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eac:	4419      	add	r1, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009a      	lsls	r2, r3, #2
 8001eb8:	441a      	add	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <UART_SetConfig+0x118>)
 8001ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	fb00 f303 	mul.w	r3, r0, r3
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	3332      	adds	r3, #50	; 0x32
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <UART_SetConfig+0x118>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	440a      	add	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001eec:	bf00      	nop
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	51eb851f 	.word	0x51eb851f

08001efc <__errno>:
 8001efc:	4b01      	ldr	r3, [pc, #4]	; (8001f04 <__errno+0x8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000018 	.word	0x20000018

08001f08 <__libc_init_array>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	2600      	movs	r6, #0
 8001f0c:	4d0c      	ldr	r5, [pc, #48]	; (8001f40 <__libc_init_array+0x38>)
 8001f0e:	4c0d      	ldr	r4, [pc, #52]	; (8001f44 <__libc_init_array+0x3c>)
 8001f10:	1b64      	subs	r4, r4, r5
 8001f12:	10a4      	asrs	r4, r4, #2
 8001f14:	42a6      	cmp	r6, r4
 8001f16:	d109      	bne.n	8001f2c <__libc_init_array+0x24>
 8001f18:	f000 fc9c 	bl	8002854 <_init>
 8001f1c:	2600      	movs	r6, #0
 8001f1e:	4d0a      	ldr	r5, [pc, #40]	; (8001f48 <__libc_init_array+0x40>)
 8001f20:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <__libc_init_array+0x44>)
 8001f22:	1b64      	subs	r4, r4, r5
 8001f24:	10a4      	asrs	r4, r4, #2
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d105      	bne.n	8001f36 <__libc_init_array+0x2e>
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f30:	4798      	blx	r3
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7ee      	b.n	8001f14 <__libc_init_array+0xc>
 8001f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3a:	4798      	blx	r3
 8001f3c:	3601      	adds	r6, #1
 8001f3e:	e7f2      	b.n	8001f26 <__libc_init_array+0x1e>
 8001f40:	08002a1c 	.word	0x08002a1c
 8001f44:	08002a1c 	.word	0x08002a1c
 8001f48:	08002a1c 	.word	0x08002a1c
 8001f4c:	08002a20 	.word	0x08002a20

08001f50 <memset>:
 8001f50:	4603      	mov	r3, r0
 8001f52:	4402      	add	r2, r0
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d100      	bne.n	8001f5a <memset+0xa>
 8001f58:	4770      	bx	lr
 8001f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f5e:	e7f9      	b.n	8001f54 <memset+0x4>

08001f60 <_vsiprintf_r>:
 8001f60:	b500      	push	{lr}
 8001f62:	b09b      	sub	sp, #108	; 0x6c
 8001f64:	9100      	str	r1, [sp, #0]
 8001f66:	9104      	str	r1, [sp, #16]
 8001f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f6c:	9105      	str	r1, [sp, #20]
 8001f6e:	9102      	str	r1, [sp, #8]
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <_vsiprintf_r+0x28>)
 8001f72:	9103      	str	r1, [sp, #12]
 8001f74:	4669      	mov	r1, sp
 8001f76:	f000 f86f 	bl	8002058 <_svfiprintf_r>
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	9b00      	ldr	r3, [sp, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	b01b      	add	sp, #108	; 0x6c
 8001f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f86:	bf00      	nop
 8001f88:	ffff0208 	.word	0xffff0208

08001f8c <vsiprintf>:
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	460a      	mov	r2, r1
 8001f90:	4601      	mov	r1, r0
 8001f92:	4802      	ldr	r0, [pc, #8]	; (8001f9c <vsiprintf+0x10>)
 8001f94:	6800      	ldr	r0, [r0, #0]
 8001f96:	f7ff bfe3 	b.w	8001f60 <_vsiprintf_r>
 8001f9a:	bf00      	nop
 8001f9c:	20000018 	.word	0x20000018

08001fa0 <__ssputs_r>:
 8001fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa4:	688e      	ldr	r6, [r1, #8]
 8001fa6:	4682      	mov	sl, r0
 8001fa8:	429e      	cmp	r6, r3
 8001faa:	460c      	mov	r4, r1
 8001fac:	4690      	mov	r8, r2
 8001fae:	461f      	mov	r7, r3
 8001fb0:	d838      	bhi.n	8002024 <__ssputs_r+0x84>
 8001fb2:	898a      	ldrh	r2, [r1, #12]
 8001fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fb8:	d032      	beq.n	8002020 <__ssputs_r+0x80>
 8001fba:	6825      	ldr	r5, [r4, #0]
 8001fbc:	6909      	ldr	r1, [r1, #16]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	eba5 0901 	sub.w	r9, r5, r1
 8001fc4:	6965      	ldr	r5, [r4, #20]
 8001fc6:	444b      	add	r3, r9
 8001fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fd0:	106d      	asrs	r5, r5, #1
 8001fd2:	429d      	cmp	r5, r3
 8001fd4:	bf38      	it	cc
 8001fd6:	461d      	movcc	r5, r3
 8001fd8:	0553      	lsls	r3, r2, #21
 8001fda:	d531      	bpl.n	8002040 <__ssputs_r+0xa0>
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f000 fb6f 	bl	80026c0 <_malloc_r>
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	b950      	cbnz	r0, 8001ffc <__ssputs_r+0x5c>
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f8ca 3000 	str.w	r3, [sl]
 8001ff0:	89a3      	ldrh	r3, [r4, #12]
 8001ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff6:	81a3      	strh	r3, [r4, #12]
 8001ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ffc:	464a      	mov	r2, r9
 8001ffe:	6921      	ldr	r1, [r4, #16]
 8002000:	f000 face 	bl	80025a0 <memcpy>
 8002004:	89a3      	ldrh	r3, [r4, #12]
 8002006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200e:	81a3      	strh	r3, [r4, #12]
 8002010:	6126      	str	r6, [r4, #16]
 8002012:	444e      	add	r6, r9
 8002014:	6026      	str	r6, [r4, #0]
 8002016:	463e      	mov	r6, r7
 8002018:	6165      	str	r5, [r4, #20]
 800201a:	eba5 0509 	sub.w	r5, r5, r9
 800201e:	60a5      	str	r5, [r4, #8]
 8002020:	42be      	cmp	r6, r7
 8002022:	d900      	bls.n	8002026 <__ssputs_r+0x86>
 8002024:	463e      	mov	r6, r7
 8002026:	4632      	mov	r2, r6
 8002028:	4641      	mov	r1, r8
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	f000 fac6 	bl	80025bc <memmove>
 8002030:	68a3      	ldr	r3, [r4, #8]
 8002032:	2000      	movs	r0, #0
 8002034:	1b9b      	subs	r3, r3, r6
 8002036:	60a3      	str	r3, [r4, #8]
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4433      	add	r3, r6
 800203c:	6023      	str	r3, [r4, #0]
 800203e:	e7db      	b.n	8001ff8 <__ssputs_r+0x58>
 8002040:	462a      	mov	r2, r5
 8002042:	f000 fbb1 	bl	80027a8 <_realloc_r>
 8002046:	4606      	mov	r6, r0
 8002048:	2800      	cmp	r0, #0
 800204a:	d1e1      	bne.n	8002010 <__ssputs_r+0x70>
 800204c:	4650      	mov	r0, sl
 800204e:	6921      	ldr	r1, [r4, #16]
 8002050:	f000 face 	bl	80025f0 <_free_r>
 8002054:	e7c7      	b.n	8001fe6 <__ssputs_r+0x46>
	...

08002058 <_svfiprintf_r>:
 8002058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205c:	4698      	mov	r8, r3
 800205e:	898b      	ldrh	r3, [r1, #12]
 8002060:	4607      	mov	r7, r0
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	460d      	mov	r5, r1
 8002066:	4614      	mov	r4, r2
 8002068:	b09d      	sub	sp, #116	; 0x74
 800206a:	d50e      	bpl.n	800208a <_svfiprintf_r+0x32>
 800206c:	690b      	ldr	r3, [r1, #16]
 800206e:	b963      	cbnz	r3, 800208a <_svfiprintf_r+0x32>
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	f000 fb25 	bl	80026c0 <_malloc_r>
 8002076:	6028      	str	r0, [r5, #0]
 8002078:	6128      	str	r0, [r5, #16]
 800207a:	b920      	cbnz	r0, 8002086 <_svfiprintf_r+0x2e>
 800207c:	230c      	movs	r3, #12
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	e0d1      	b.n	800222a <_svfiprintf_r+0x1d2>
 8002086:	2340      	movs	r3, #64	; 0x40
 8002088:	616b      	str	r3, [r5, #20]
 800208a:	2300      	movs	r3, #0
 800208c:	9309      	str	r3, [sp, #36]	; 0x24
 800208e:	2320      	movs	r3, #32
 8002090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002094:	2330      	movs	r3, #48	; 0x30
 8002096:	f04f 0901 	mov.w	r9, #1
 800209a:	f8cd 800c 	str.w	r8, [sp, #12]
 800209e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002244 <_svfiprintf_r+0x1ec>
 80020a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80020a6:	4623      	mov	r3, r4
 80020a8:	469a      	mov	sl, r3
 80020aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020ae:	b10a      	cbz	r2, 80020b4 <_svfiprintf_r+0x5c>
 80020b0:	2a25      	cmp	r2, #37	; 0x25
 80020b2:	d1f9      	bne.n	80020a8 <_svfiprintf_r+0x50>
 80020b4:	ebba 0b04 	subs.w	fp, sl, r4
 80020b8:	d00b      	beq.n	80020d2 <_svfiprintf_r+0x7a>
 80020ba:	465b      	mov	r3, fp
 80020bc:	4622      	mov	r2, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	4638      	mov	r0, r7
 80020c2:	f7ff ff6d 	bl	8001fa0 <__ssputs_r>
 80020c6:	3001      	adds	r0, #1
 80020c8:	f000 80aa 	beq.w	8002220 <_svfiprintf_r+0x1c8>
 80020cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020ce:	445a      	add	r2, fp
 80020d0:	9209      	str	r2, [sp, #36]	; 0x24
 80020d2:	f89a 3000 	ldrb.w	r3, [sl]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a2 	beq.w	8002220 <_svfiprintf_r+0x1c8>
 80020dc:	2300      	movs	r3, #0
 80020de:	f04f 32ff 	mov.w	r2, #4294967295
 80020e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020e6:	f10a 0a01 	add.w	sl, sl, #1
 80020ea:	9304      	str	r3, [sp, #16]
 80020ec:	9307      	str	r3, [sp, #28]
 80020ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020f2:	931a      	str	r3, [sp, #104]	; 0x68
 80020f4:	4654      	mov	r4, sl
 80020f6:	2205      	movs	r2, #5
 80020f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020fc:	4851      	ldr	r0, [pc, #324]	; (8002244 <_svfiprintf_r+0x1ec>)
 80020fe:	f000 fa41 	bl	8002584 <memchr>
 8002102:	9a04      	ldr	r2, [sp, #16]
 8002104:	b9d8      	cbnz	r0, 800213e <_svfiprintf_r+0xe6>
 8002106:	06d0      	lsls	r0, r2, #27
 8002108:	bf44      	itt	mi
 800210a:	2320      	movmi	r3, #32
 800210c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002110:	0711      	lsls	r1, r2, #28
 8002112:	bf44      	itt	mi
 8002114:	232b      	movmi	r3, #43	; 0x2b
 8002116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800211a:	f89a 3000 	ldrb.w	r3, [sl]
 800211e:	2b2a      	cmp	r3, #42	; 0x2a
 8002120:	d015      	beq.n	800214e <_svfiprintf_r+0xf6>
 8002122:	4654      	mov	r4, sl
 8002124:	2000      	movs	r0, #0
 8002126:	f04f 0c0a 	mov.w	ip, #10
 800212a:	9a07      	ldr	r2, [sp, #28]
 800212c:	4621      	mov	r1, r4
 800212e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002132:	3b30      	subs	r3, #48	; 0x30
 8002134:	2b09      	cmp	r3, #9
 8002136:	d94e      	bls.n	80021d6 <_svfiprintf_r+0x17e>
 8002138:	b1b0      	cbz	r0, 8002168 <_svfiprintf_r+0x110>
 800213a:	9207      	str	r2, [sp, #28]
 800213c:	e014      	b.n	8002168 <_svfiprintf_r+0x110>
 800213e:	eba0 0308 	sub.w	r3, r0, r8
 8002142:	fa09 f303 	lsl.w	r3, r9, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	46a2      	mov	sl, r4
 800214a:	9304      	str	r3, [sp, #16]
 800214c:	e7d2      	b.n	80020f4 <_svfiprintf_r+0x9c>
 800214e:	9b03      	ldr	r3, [sp, #12]
 8002150:	1d19      	adds	r1, r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	9103      	str	r1, [sp, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	bfbb      	ittet	lt
 800215a:	425b      	neglt	r3, r3
 800215c:	f042 0202 	orrlt.w	r2, r2, #2
 8002160:	9307      	strge	r3, [sp, #28]
 8002162:	9307      	strlt	r3, [sp, #28]
 8002164:	bfb8      	it	lt
 8002166:	9204      	strlt	r2, [sp, #16]
 8002168:	7823      	ldrb	r3, [r4, #0]
 800216a:	2b2e      	cmp	r3, #46	; 0x2e
 800216c:	d10c      	bne.n	8002188 <_svfiprintf_r+0x130>
 800216e:	7863      	ldrb	r3, [r4, #1]
 8002170:	2b2a      	cmp	r3, #42	; 0x2a
 8002172:	d135      	bne.n	80021e0 <_svfiprintf_r+0x188>
 8002174:	9b03      	ldr	r3, [sp, #12]
 8002176:	3402      	adds	r4, #2
 8002178:	1d1a      	adds	r2, r3, #4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	9203      	str	r2, [sp, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bfb8      	it	lt
 8002182:	f04f 33ff 	movlt.w	r3, #4294967295
 8002186:	9305      	str	r3, [sp, #20]
 8002188:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002248 <_svfiprintf_r+0x1f0>
 800218c:	2203      	movs	r2, #3
 800218e:	4650      	mov	r0, sl
 8002190:	7821      	ldrb	r1, [r4, #0]
 8002192:	f000 f9f7 	bl	8002584 <memchr>
 8002196:	b140      	cbz	r0, 80021aa <_svfiprintf_r+0x152>
 8002198:	2340      	movs	r3, #64	; 0x40
 800219a:	eba0 000a 	sub.w	r0, r0, sl
 800219e:	fa03 f000 	lsl.w	r0, r3, r0
 80021a2:	9b04      	ldr	r3, [sp, #16]
 80021a4:	3401      	adds	r4, #1
 80021a6:	4303      	orrs	r3, r0
 80021a8:	9304      	str	r3, [sp, #16]
 80021aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021ae:	2206      	movs	r2, #6
 80021b0:	4826      	ldr	r0, [pc, #152]	; (800224c <_svfiprintf_r+0x1f4>)
 80021b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021b6:	f000 f9e5 	bl	8002584 <memchr>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d038      	beq.n	8002230 <_svfiprintf_r+0x1d8>
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <_svfiprintf_r+0x1f8>)
 80021c0:	bb1b      	cbnz	r3, 800220a <_svfiprintf_r+0x1b2>
 80021c2:	9b03      	ldr	r3, [sp, #12]
 80021c4:	3307      	adds	r3, #7
 80021c6:	f023 0307 	bic.w	r3, r3, #7
 80021ca:	3308      	adds	r3, #8
 80021cc:	9303      	str	r3, [sp, #12]
 80021ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021d0:	4433      	add	r3, r6
 80021d2:	9309      	str	r3, [sp, #36]	; 0x24
 80021d4:	e767      	b.n	80020a6 <_svfiprintf_r+0x4e>
 80021d6:	460c      	mov	r4, r1
 80021d8:	2001      	movs	r0, #1
 80021da:	fb0c 3202 	mla	r2, ip, r2, r3
 80021de:	e7a5      	b.n	800212c <_svfiprintf_r+0xd4>
 80021e0:	2300      	movs	r3, #0
 80021e2:	f04f 0c0a 	mov.w	ip, #10
 80021e6:	4619      	mov	r1, r3
 80021e8:	3401      	adds	r4, #1
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	4620      	mov	r0, r4
 80021ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021f2:	3a30      	subs	r2, #48	; 0x30
 80021f4:	2a09      	cmp	r2, #9
 80021f6:	d903      	bls.n	8002200 <_svfiprintf_r+0x1a8>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0c5      	beq.n	8002188 <_svfiprintf_r+0x130>
 80021fc:	9105      	str	r1, [sp, #20]
 80021fe:	e7c3      	b.n	8002188 <_svfiprintf_r+0x130>
 8002200:	4604      	mov	r4, r0
 8002202:	2301      	movs	r3, #1
 8002204:	fb0c 2101 	mla	r1, ip, r1, r2
 8002208:	e7f0      	b.n	80021ec <_svfiprintf_r+0x194>
 800220a:	ab03      	add	r3, sp, #12
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	462a      	mov	r2, r5
 8002210:	4638      	mov	r0, r7
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <_svfiprintf_r+0x1fc>)
 8002214:	a904      	add	r1, sp, #16
 8002216:	f3af 8000 	nop.w
 800221a:	1c42      	adds	r2, r0, #1
 800221c:	4606      	mov	r6, r0
 800221e:	d1d6      	bne.n	80021ce <_svfiprintf_r+0x176>
 8002220:	89ab      	ldrh	r3, [r5, #12]
 8002222:	065b      	lsls	r3, r3, #25
 8002224:	f53f af2c 	bmi.w	8002080 <_svfiprintf_r+0x28>
 8002228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800222a:	b01d      	add	sp, #116	; 0x74
 800222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002230:	ab03      	add	r3, sp, #12
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	462a      	mov	r2, r5
 8002236:	4638      	mov	r0, r7
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <_svfiprintf_r+0x1fc>)
 800223a:	a904      	add	r1, sp, #16
 800223c:	f000 f87c 	bl	8002338 <_printf_i>
 8002240:	e7eb      	b.n	800221a <_svfiprintf_r+0x1c2>
 8002242:	bf00      	nop
 8002244:	080029e8 	.word	0x080029e8
 8002248:	080029ee 	.word	0x080029ee
 800224c:	080029f2 	.word	0x080029f2
 8002250:	00000000 	.word	0x00000000
 8002254:	08001fa1 	.word	0x08001fa1

08002258 <_printf_common>:
 8002258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800225c:	4616      	mov	r6, r2
 800225e:	4699      	mov	r9, r3
 8002260:	688a      	ldr	r2, [r1, #8]
 8002262:	690b      	ldr	r3, [r1, #16]
 8002264:	4607      	mov	r7, r0
 8002266:	4293      	cmp	r3, r2
 8002268:	bfb8      	it	lt
 800226a:	4613      	movlt	r3, r2
 800226c:	6033      	str	r3, [r6, #0]
 800226e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002272:	460c      	mov	r4, r1
 8002274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002278:	b10a      	cbz	r2, 800227e <_printf_common+0x26>
 800227a:	3301      	adds	r3, #1
 800227c:	6033      	str	r3, [r6, #0]
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	0699      	lsls	r1, r3, #26
 8002282:	bf42      	ittt	mi
 8002284:	6833      	ldrmi	r3, [r6, #0]
 8002286:	3302      	addmi	r3, #2
 8002288:	6033      	strmi	r3, [r6, #0]
 800228a:	6825      	ldr	r5, [r4, #0]
 800228c:	f015 0506 	ands.w	r5, r5, #6
 8002290:	d106      	bne.n	80022a0 <_printf_common+0x48>
 8002292:	f104 0a19 	add.w	sl, r4, #25
 8002296:	68e3      	ldr	r3, [r4, #12]
 8002298:	6832      	ldr	r2, [r6, #0]
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	42ab      	cmp	r3, r5
 800229e:	dc28      	bgt.n	80022f2 <_printf_common+0x9a>
 80022a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80022a4:	1e13      	subs	r3, r2, #0
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	bf18      	it	ne
 80022aa:	2301      	movne	r3, #1
 80022ac:	0692      	lsls	r2, r2, #26
 80022ae:	d42d      	bmi.n	800230c <_printf_common+0xb4>
 80022b0:	4649      	mov	r1, r9
 80022b2:	4638      	mov	r0, r7
 80022b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022b8:	47c0      	blx	r8
 80022ba:	3001      	adds	r0, #1
 80022bc:	d020      	beq.n	8002300 <_printf_common+0xa8>
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	68e5      	ldr	r5, [r4, #12]
 80022c2:	f003 0306 	and.w	r3, r3, #6
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf18      	it	ne
 80022ca:	2500      	movne	r5, #0
 80022cc:	6832      	ldr	r2, [r6, #0]
 80022ce:	f04f 0600 	mov.w	r6, #0
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	bf08      	it	eq
 80022d6:	1aad      	subeq	r5, r5, r2
 80022d8:	6922      	ldr	r2, [r4, #16]
 80022da:	bf08      	it	eq
 80022dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bfc4      	itt	gt
 80022e4:	1a9b      	subgt	r3, r3, r2
 80022e6:	18ed      	addgt	r5, r5, r3
 80022e8:	341a      	adds	r4, #26
 80022ea:	42b5      	cmp	r5, r6
 80022ec:	d11a      	bne.n	8002324 <_printf_common+0xcc>
 80022ee:	2000      	movs	r0, #0
 80022f0:	e008      	b.n	8002304 <_printf_common+0xac>
 80022f2:	2301      	movs	r3, #1
 80022f4:	4652      	mov	r2, sl
 80022f6:	4649      	mov	r1, r9
 80022f8:	4638      	mov	r0, r7
 80022fa:	47c0      	blx	r8
 80022fc:	3001      	adds	r0, #1
 80022fe:	d103      	bne.n	8002308 <_printf_common+0xb0>
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002308:	3501      	adds	r5, #1
 800230a:	e7c4      	b.n	8002296 <_printf_common+0x3e>
 800230c:	2030      	movs	r0, #48	; 0x30
 800230e:	18e1      	adds	r1, r4, r3
 8002310:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800231a:	4422      	add	r2, r4
 800231c:	3302      	adds	r3, #2
 800231e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002322:	e7c5      	b.n	80022b0 <_printf_common+0x58>
 8002324:	2301      	movs	r3, #1
 8002326:	4622      	mov	r2, r4
 8002328:	4649      	mov	r1, r9
 800232a:	4638      	mov	r0, r7
 800232c:	47c0      	blx	r8
 800232e:	3001      	adds	r0, #1
 8002330:	d0e6      	beq.n	8002300 <_printf_common+0xa8>
 8002332:	3601      	adds	r6, #1
 8002334:	e7d9      	b.n	80022ea <_printf_common+0x92>
	...

08002338 <_printf_i>:
 8002338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800233c:	7e0f      	ldrb	r7, [r1, #24]
 800233e:	4691      	mov	r9, r2
 8002340:	2f78      	cmp	r7, #120	; 0x78
 8002342:	4680      	mov	r8, r0
 8002344:	460c      	mov	r4, r1
 8002346:	469a      	mov	sl, r3
 8002348:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800234a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800234e:	d807      	bhi.n	8002360 <_printf_i+0x28>
 8002350:	2f62      	cmp	r7, #98	; 0x62
 8002352:	d80a      	bhi.n	800236a <_printf_i+0x32>
 8002354:	2f00      	cmp	r7, #0
 8002356:	f000 80d9 	beq.w	800250c <_printf_i+0x1d4>
 800235a:	2f58      	cmp	r7, #88	; 0x58
 800235c:	f000 80a4 	beq.w	80024a8 <_printf_i+0x170>
 8002360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002368:	e03a      	b.n	80023e0 <_printf_i+0xa8>
 800236a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800236e:	2b15      	cmp	r3, #21
 8002370:	d8f6      	bhi.n	8002360 <_printf_i+0x28>
 8002372:	a101      	add	r1, pc, #4	; (adr r1, 8002378 <_printf_i+0x40>)
 8002374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002378:	080023d1 	.word	0x080023d1
 800237c:	080023e5 	.word	0x080023e5
 8002380:	08002361 	.word	0x08002361
 8002384:	08002361 	.word	0x08002361
 8002388:	08002361 	.word	0x08002361
 800238c:	08002361 	.word	0x08002361
 8002390:	080023e5 	.word	0x080023e5
 8002394:	08002361 	.word	0x08002361
 8002398:	08002361 	.word	0x08002361
 800239c:	08002361 	.word	0x08002361
 80023a0:	08002361 	.word	0x08002361
 80023a4:	080024f3 	.word	0x080024f3
 80023a8:	08002415 	.word	0x08002415
 80023ac:	080024d5 	.word	0x080024d5
 80023b0:	08002361 	.word	0x08002361
 80023b4:	08002361 	.word	0x08002361
 80023b8:	08002515 	.word	0x08002515
 80023bc:	08002361 	.word	0x08002361
 80023c0:	08002415 	.word	0x08002415
 80023c4:	08002361 	.word	0x08002361
 80023c8:	08002361 	.word	0x08002361
 80023cc:	080024dd 	.word	0x080024dd
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	602a      	str	r2, [r5, #0]
 80023d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0a4      	b.n	800252e <_printf_i+0x1f6>
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	6829      	ldr	r1, [r5, #0]
 80023e8:	0606      	lsls	r6, r0, #24
 80023ea:	f101 0304 	add.w	r3, r1, #4
 80023ee:	d50a      	bpl.n	8002406 <_printf_i+0xce>
 80023f0:	680e      	ldr	r6, [r1, #0]
 80023f2:	602b      	str	r3, [r5, #0]
 80023f4:	2e00      	cmp	r6, #0
 80023f6:	da03      	bge.n	8002400 <_printf_i+0xc8>
 80023f8:	232d      	movs	r3, #45	; 0x2d
 80023fa:	4276      	negs	r6, r6
 80023fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002400:	230a      	movs	r3, #10
 8002402:	485e      	ldr	r0, [pc, #376]	; (800257c <_printf_i+0x244>)
 8002404:	e019      	b.n	800243a <_printf_i+0x102>
 8002406:	680e      	ldr	r6, [r1, #0]
 8002408:	f010 0f40 	tst.w	r0, #64	; 0x40
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	bf18      	it	ne
 8002410:	b236      	sxthne	r6, r6
 8002412:	e7ef      	b.n	80023f4 <_printf_i+0xbc>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	6820      	ldr	r0, [r4, #0]
 8002418:	1d19      	adds	r1, r3, #4
 800241a:	6029      	str	r1, [r5, #0]
 800241c:	0601      	lsls	r1, r0, #24
 800241e:	d501      	bpl.n	8002424 <_printf_i+0xec>
 8002420:	681e      	ldr	r6, [r3, #0]
 8002422:	e002      	b.n	800242a <_printf_i+0xf2>
 8002424:	0646      	lsls	r6, r0, #25
 8002426:	d5fb      	bpl.n	8002420 <_printf_i+0xe8>
 8002428:	881e      	ldrh	r6, [r3, #0]
 800242a:	2f6f      	cmp	r7, #111	; 0x6f
 800242c:	bf0c      	ite	eq
 800242e:	2308      	moveq	r3, #8
 8002430:	230a      	movne	r3, #10
 8002432:	4852      	ldr	r0, [pc, #328]	; (800257c <_printf_i+0x244>)
 8002434:	2100      	movs	r1, #0
 8002436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800243a:	6865      	ldr	r5, [r4, #4]
 800243c:	2d00      	cmp	r5, #0
 800243e:	bfa8      	it	ge
 8002440:	6821      	ldrge	r1, [r4, #0]
 8002442:	60a5      	str	r5, [r4, #8]
 8002444:	bfa4      	itt	ge
 8002446:	f021 0104 	bicge.w	r1, r1, #4
 800244a:	6021      	strge	r1, [r4, #0]
 800244c:	b90e      	cbnz	r6, 8002452 <_printf_i+0x11a>
 800244e:	2d00      	cmp	r5, #0
 8002450:	d04d      	beq.n	80024ee <_printf_i+0x1b6>
 8002452:	4615      	mov	r5, r2
 8002454:	fbb6 f1f3 	udiv	r1, r6, r3
 8002458:	fb03 6711 	mls	r7, r3, r1, r6
 800245c:	5dc7      	ldrb	r7, [r0, r7]
 800245e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002462:	4637      	mov	r7, r6
 8002464:	42bb      	cmp	r3, r7
 8002466:	460e      	mov	r6, r1
 8002468:	d9f4      	bls.n	8002454 <_printf_i+0x11c>
 800246a:	2b08      	cmp	r3, #8
 800246c:	d10b      	bne.n	8002486 <_printf_i+0x14e>
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	07de      	lsls	r6, r3, #31
 8002472:	d508      	bpl.n	8002486 <_printf_i+0x14e>
 8002474:	6923      	ldr	r3, [r4, #16]
 8002476:	6861      	ldr	r1, [r4, #4]
 8002478:	4299      	cmp	r1, r3
 800247a:	bfde      	ittt	le
 800247c:	2330      	movle	r3, #48	; 0x30
 800247e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002482:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002486:	1b52      	subs	r2, r2, r5
 8002488:	6122      	str	r2, [r4, #16]
 800248a:	464b      	mov	r3, r9
 800248c:	4621      	mov	r1, r4
 800248e:	4640      	mov	r0, r8
 8002490:	f8cd a000 	str.w	sl, [sp]
 8002494:	aa03      	add	r2, sp, #12
 8002496:	f7ff fedf 	bl	8002258 <_printf_common>
 800249a:	3001      	adds	r0, #1
 800249c:	d14c      	bne.n	8002538 <_printf_i+0x200>
 800249e:	f04f 30ff 	mov.w	r0, #4294967295
 80024a2:	b004      	add	sp, #16
 80024a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a8:	4834      	ldr	r0, [pc, #208]	; (800257c <_printf_i+0x244>)
 80024aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80024ae:	6829      	ldr	r1, [r5, #0]
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80024b6:	6029      	str	r1, [r5, #0]
 80024b8:	061d      	lsls	r5, r3, #24
 80024ba:	d514      	bpl.n	80024e6 <_printf_i+0x1ae>
 80024bc:	07df      	lsls	r7, r3, #31
 80024be:	bf44      	itt	mi
 80024c0:	f043 0320 	orrmi.w	r3, r3, #32
 80024c4:	6023      	strmi	r3, [r4, #0]
 80024c6:	b91e      	cbnz	r6, 80024d0 <_printf_i+0x198>
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f023 0320 	bic.w	r3, r3, #32
 80024ce:	6023      	str	r3, [r4, #0]
 80024d0:	2310      	movs	r3, #16
 80024d2:	e7af      	b.n	8002434 <_printf_i+0xfc>
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	6023      	str	r3, [r4, #0]
 80024dc:	2378      	movs	r3, #120	; 0x78
 80024de:	4828      	ldr	r0, [pc, #160]	; (8002580 <_printf_i+0x248>)
 80024e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024e4:	e7e3      	b.n	80024ae <_printf_i+0x176>
 80024e6:	0659      	lsls	r1, r3, #25
 80024e8:	bf48      	it	mi
 80024ea:	b2b6      	uxthmi	r6, r6
 80024ec:	e7e6      	b.n	80024bc <_printf_i+0x184>
 80024ee:	4615      	mov	r5, r2
 80024f0:	e7bb      	b.n	800246a <_printf_i+0x132>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	6826      	ldr	r6, [r4, #0]
 80024f6:	1d18      	adds	r0, r3, #4
 80024f8:	6961      	ldr	r1, [r4, #20]
 80024fa:	6028      	str	r0, [r5, #0]
 80024fc:	0635      	lsls	r5, r6, #24
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	d501      	bpl.n	8002506 <_printf_i+0x1ce>
 8002502:	6019      	str	r1, [r3, #0]
 8002504:	e002      	b.n	800250c <_printf_i+0x1d4>
 8002506:	0670      	lsls	r0, r6, #25
 8002508:	d5fb      	bpl.n	8002502 <_printf_i+0x1ca>
 800250a:	8019      	strh	r1, [r3, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	4615      	mov	r5, r2
 8002510:	6123      	str	r3, [r4, #16]
 8002512:	e7ba      	b.n	800248a <_printf_i+0x152>
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	2100      	movs	r1, #0
 8002518:	1d1a      	adds	r2, r3, #4
 800251a:	602a      	str	r2, [r5, #0]
 800251c:	681d      	ldr	r5, [r3, #0]
 800251e:	6862      	ldr	r2, [r4, #4]
 8002520:	4628      	mov	r0, r5
 8002522:	f000 f82f 	bl	8002584 <memchr>
 8002526:	b108      	cbz	r0, 800252c <_printf_i+0x1f4>
 8002528:	1b40      	subs	r0, r0, r5
 800252a:	6060      	str	r0, [r4, #4]
 800252c:	6863      	ldr	r3, [r4, #4]
 800252e:	6123      	str	r3, [r4, #16]
 8002530:	2300      	movs	r3, #0
 8002532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002536:	e7a8      	b.n	800248a <_printf_i+0x152>
 8002538:	462a      	mov	r2, r5
 800253a:	4649      	mov	r1, r9
 800253c:	4640      	mov	r0, r8
 800253e:	6923      	ldr	r3, [r4, #16]
 8002540:	47d0      	blx	sl
 8002542:	3001      	adds	r0, #1
 8002544:	d0ab      	beq.n	800249e <_printf_i+0x166>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	079b      	lsls	r3, r3, #30
 800254a:	d413      	bmi.n	8002574 <_printf_i+0x23c>
 800254c:	68e0      	ldr	r0, [r4, #12]
 800254e:	9b03      	ldr	r3, [sp, #12]
 8002550:	4298      	cmp	r0, r3
 8002552:	bfb8      	it	lt
 8002554:	4618      	movlt	r0, r3
 8002556:	e7a4      	b.n	80024a2 <_printf_i+0x16a>
 8002558:	2301      	movs	r3, #1
 800255a:	4632      	mov	r2, r6
 800255c:	4649      	mov	r1, r9
 800255e:	4640      	mov	r0, r8
 8002560:	47d0      	blx	sl
 8002562:	3001      	adds	r0, #1
 8002564:	d09b      	beq.n	800249e <_printf_i+0x166>
 8002566:	3501      	adds	r5, #1
 8002568:	68e3      	ldr	r3, [r4, #12]
 800256a:	9903      	ldr	r1, [sp, #12]
 800256c:	1a5b      	subs	r3, r3, r1
 800256e:	42ab      	cmp	r3, r5
 8002570:	dcf2      	bgt.n	8002558 <_printf_i+0x220>
 8002572:	e7eb      	b.n	800254c <_printf_i+0x214>
 8002574:	2500      	movs	r5, #0
 8002576:	f104 0619 	add.w	r6, r4, #25
 800257a:	e7f5      	b.n	8002568 <_printf_i+0x230>
 800257c:	080029f9 	.word	0x080029f9
 8002580:	08002a0a 	.word	0x08002a0a

08002584 <memchr>:
 8002584:	4603      	mov	r3, r0
 8002586:	b510      	push	{r4, lr}
 8002588:	b2c9      	uxtb	r1, r1
 800258a:	4402      	add	r2, r0
 800258c:	4293      	cmp	r3, r2
 800258e:	4618      	mov	r0, r3
 8002590:	d101      	bne.n	8002596 <memchr+0x12>
 8002592:	2000      	movs	r0, #0
 8002594:	e003      	b.n	800259e <memchr+0x1a>
 8002596:	7804      	ldrb	r4, [r0, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	428c      	cmp	r4, r1
 800259c:	d1f6      	bne.n	800258c <memchr+0x8>
 800259e:	bd10      	pop	{r4, pc}

080025a0 <memcpy>:
 80025a0:	440a      	add	r2, r1
 80025a2:	4291      	cmp	r1, r2
 80025a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80025a8:	d100      	bne.n	80025ac <memcpy+0xc>
 80025aa:	4770      	bx	lr
 80025ac:	b510      	push	{r4, lr}
 80025ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025b2:	4291      	cmp	r1, r2
 80025b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025b8:	d1f9      	bne.n	80025ae <memcpy+0xe>
 80025ba:	bd10      	pop	{r4, pc}

080025bc <memmove>:
 80025bc:	4288      	cmp	r0, r1
 80025be:	b510      	push	{r4, lr}
 80025c0:	eb01 0402 	add.w	r4, r1, r2
 80025c4:	d902      	bls.n	80025cc <memmove+0x10>
 80025c6:	4284      	cmp	r4, r0
 80025c8:	4623      	mov	r3, r4
 80025ca:	d807      	bhi.n	80025dc <memmove+0x20>
 80025cc:	1e43      	subs	r3, r0, #1
 80025ce:	42a1      	cmp	r1, r4
 80025d0:	d008      	beq.n	80025e4 <memmove+0x28>
 80025d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025da:	e7f8      	b.n	80025ce <memmove+0x12>
 80025dc:	4601      	mov	r1, r0
 80025de:	4402      	add	r2, r0
 80025e0:	428a      	cmp	r2, r1
 80025e2:	d100      	bne.n	80025e6 <memmove+0x2a>
 80025e4:	bd10      	pop	{r4, pc}
 80025e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025ee:	e7f7      	b.n	80025e0 <memmove+0x24>

080025f0 <_free_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4605      	mov	r5, r0
 80025f4:	2900      	cmp	r1, #0
 80025f6:	d040      	beq.n	800267a <_free_r+0x8a>
 80025f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025fc:	1f0c      	subs	r4, r1, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bfb8      	it	lt
 8002602:	18e4      	addlt	r4, r4, r3
 8002604:	f000 f910 	bl	8002828 <__malloc_lock>
 8002608:	4a1c      	ldr	r2, [pc, #112]	; (800267c <_free_r+0x8c>)
 800260a:	6813      	ldr	r3, [r2, #0]
 800260c:	b933      	cbnz	r3, 800261c <_free_r+0x2c>
 800260e:	6063      	str	r3, [r4, #4]
 8002610:	6014      	str	r4, [r2, #0]
 8002612:	4628      	mov	r0, r5
 8002614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002618:	f000 b90c 	b.w	8002834 <__malloc_unlock>
 800261c:	42a3      	cmp	r3, r4
 800261e:	d908      	bls.n	8002632 <_free_r+0x42>
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	1821      	adds	r1, r4, r0
 8002624:	428b      	cmp	r3, r1
 8002626:	bf01      	itttt	eq
 8002628:	6819      	ldreq	r1, [r3, #0]
 800262a:	685b      	ldreq	r3, [r3, #4]
 800262c:	1809      	addeq	r1, r1, r0
 800262e:	6021      	streq	r1, [r4, #0]
 8002630:	e7ed      	b.n	800260e <_free_r+0x1e>
 8002632:	461a      	mov	r2, r3
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b10b      	cbz	r3, 800263c <_free_r+0x4c>
 8002638:	42a3      	cmp	r3, r4
 800263a:	d9fa      	bls.n	8002632 <_free_r+0x42>
 800263c:	6811      	ldr	r1, [r2, #0]
 800263e:	1850      	adds	r0, r2, r1
 8002640:	42a0      	cmp	r0, r4
 8002642:	d10b      	bne.n	800265c <_free_r+0x6c>
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	4401      	add	r1, r0
 8002648:	1850      	adds	r0, r2, r1
 800264a:	4283      	cmp	r3, r0
 800264c:	6011      	str	r1, [r2, #0]
 800264e:	d1e0      	bne.n	8002612 <_free_r+0x22>
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4401      	add	r1, r0
 8002656:	6011      	str	r1, [r2, #0]
 8002658:	6053      	str	r3, [r2, #4]
 800265a:	e7da      	b.n	8002612 <_free_r+0x22>
 800265c:	d902      	bls.n	8002664 <_free_r+0x74>
 800265e:	230c      	movs	r3, #12
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	e7d6      	b.n	8002612 <_free_r+0x22>
 8002664:	6820      	ldr	r0, [r4, #0]
 8002666:	1821      	adds	r1, r4, r0
 8002668:	428b      	cmp	r3, r1
 800266a:	bf01      	itttt	eq
 800266c:	6819      	ldreq	r1, [r3, #0]
 800266e:	685b      	ldreq	r3, [r3, #4]
 8002670:	1809      	addeq	r1, r1, r0
 8002672:	6021      	streq	r1, [r4, #0]
 8002674:	6063      	str	r3, [r4, #4]
 8002676:	6054      	str	r4, [r2, #4]
 8002678:	e7cb      	b.n	8002612 <_free_r+0x22>
 800267a:	bd38      	pop	{r3, r4, r5, pc}
 800267c:	200001f8 	.word	0x200001f8

08002680 <sbrk_aligned>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	4e0e      	ldr	r6, [pc, #56]	; (80026bc <sbrk_aligned+0x3c>)
 8002684:	460c      	mov	r4, r1
 8002686:	6831      	ldr	r1, [r6, #0]
 8002688:	4605      	mov	r5, r0
 800268a:	b911      	cbnz	r1, 8002692 <sbrk_aligned+0x12>
 800268c:	f000 f8bc 	bl	8002808 <_sbrk_r>
 8002690:	6030      	str	r0, [r6, #0]
 8002692:	4621      	mov	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f000 f8b7 	bl	8002808 <_sbrk_r>
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	d00a      	beq.n	80026b4 <sbrk_aligned+0x34>
 800269e:	1cc4      	adds	r4, r0, #3
 80026a0:	f024 0403 	bic.w	r4, r4, #3
 80026a4:	42a0      	cmp	r0, r4
 80026a6:	d007      	beq.n	80026b8 <sbrk_aligned+0x38>
 80026a8:	1a21      	subs	r1, r4, r0
 80026aa:	4628      	mov	r0, r5
 80026ac:	f000 f8ac 	bl	8002808 <_sbrk_r>
 80026b0:	3001      	adds	r0, #1
 80026b2:	d101      	bne.n	80026b8 <sbrk_aligned+0x38>
 80026b4:	f04f 34ff 	mov.w	r4, #4294967295
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	200001fc 	.word	0x200001fc

080026c0 <_malloc_r>:
 80026c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026c4:	1ccd      	adds	r5, r1, #3
 80026c6:	f025 0503 	bic.w	r5, r5, #3
 80026ca:	3508      	adds	r5, #8
 80026cc:	2d0c      	cmp	r5, #12
 80026ce:	bf38      	it	cc
 80026d0:	250c      	movcc	r5, #12
 80026d2:	2d00      	cmp	r5, #0
 80026d4:	4607      	mov	r7, r0
 80026d6:	db01      	blt.n	80026dc <_malloc_r+0x1c>
 80026d8:	42a9      	cmp	r1, r5
 80026da:	d905      	bls.n	80026e8 <_malloc_r+0x28>
 80026dc:	230c      	movs	r3, #12
 80026de:	2600      	movs	r6, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4630      	mov	r0, r6
 80026e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e8:	4e2e      	ldr	r6, [pc, #184]	; (80027a4 <_malloc_r+0xe4>)
 80026ea:	f000 f89d 	bl	8002828 <__malloc_lock>
 80026ee:	6833      	ldr	r3, [r6, #0]
 80026f0:	461c      	mov	r4, r3
 80026f2:	bb34      	cbnz	r4, 8002742 <_malloc_r+0x82>
 80026f4:	4629      	mov	r1, r5
 80026f6:	4638      	mov	r0, r7
 80026f8:	f7ff ffc2 	bl	8002680 <sbrk_aligned>
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	4604      	mov	r4, r0
 8002700:	d14d      	bne.n	800279e <_malloc_r+0xde>
 8002702:	6834      	ldr	r4, [r6, #0]
 8002704:	4626      	mov	r6, r4
 8002706:	2e00      	cmp	r6, #0
 8002708:	d140      	bne.n	800278c <_malloc_r+0xcc>
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	4631      	mov	r1, r6
 800270e:	4638      	mov	r0, r7
 8002710:	eb04 0803 	add.w	r8, r4, r3
 8002714:	f000 f878 	bl	8002808 <_sbrk_r>
 8002718:	4580      	cmp	r8, r0
 800271a:	d13a      	bne.n	8002792 <_malloc_r+0xd2>
 800271c:	6821      	ldr	r1, [r4, #0]
 800271e:	3503      	adds	r5, #3
 8002720:	1a6d      	subs	r5, r5, r1
 8002722:	f025 0503 	bic.w	r5, r5, #3
 8002726:	3508      	adds	r5, #8
 8002728:	2d0c      	cmp	r5, #12
 800272a:	bf38      	it	cc
 800272c:	250c      	movcc	r5, #12
 800272e:	4638      	mov	r0, r7
 8002730:	4629      	mov	r1, r5
 8002732:	f7ff ffa5 	bl	8002680 <sbrk_aligned>
 8002736:	3001      	adds	r0, #1
 8002738:	d02b      	beq.n	8002792 <_malloc_r+0xd2>
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	442b      	add	r3, r5
 800273e:	6023      	str	r3, [r4, #0]
 8002740:	e00e      	b.n	8002760 <_malloc_r+0xa0>
 8002742:	6822      	ldr	r2, [r4, #0]
 8002744:	1b52      	subs	r2, r2, r5
 8002746:	d41e      	bmi.n	8002786 <_malloc_r+0xc6>
 8002748:	2a0b      	cmp	r2, #11
 800274a:	d916      	bls.n	800277a <_malloc_r+0xba>
 800274c:	1961      	adds	r1, r4, r5
 800274e:	42a3      	cmp	r3, r4
 8002750:	6025      	str	r5, [r4, #0]
 8002752:	bf18      	it	ne
 8002754:	6059      	strne	r1, [r3, #4]
 8002756:	6863      	ldr	r3, [r4, #4]
 8002758:	bf08      	it	eq
 800275a:	6031      	streq	r1, [r6, #0]
 800275c:	5162      	str	r2, [r4, r5]
 800275e:	604b      	str	r3, [r1, #4]
 8002760:	4638      	mov	r0, r7
 8002762:	f104 060b 	add.w	r6, r4, #11
 8002766:	f000 f865 	bl	8002834 <__malloc_unlock>
 800276a:	f026 0607 	bic.w	r6, r6, #7
 800276e:	1d23      	adds	r3, r4, #4
 8002770:	1af2      	subs	r2, r6, r3
 8002772:	d0b6      	beq.n	80026e2 <_malloc_r+0x22>
 8002774:	1b9b      	subs	r3, r3, r6
 8002776:	50a3      	str	r3, [r4, r2]
 8002778:	e7b3      	b.n	80026e2 <_malloc_r+0x22>
 800277a:	6862      	ldr	r2, [r4, #4]
 800277c:	42a3      	cmp	r3, r4
 800277e:	bf0c      	ite	eq
 8002780:	6032      	streq	r2, [r6, #0]
 8002782:	605a      	strne	r2, [r3, #4]
 8002784:	e7ec      	b.n	8002760 <_malloc_r+0xa0>
 8002786:	4623      	mov	r3, r4
 8002788:	6864      	ldr	r4, [r4, #4]
 800278a:	e7b2      	b.n	80026f2 <_malloc_r+0x32>
 800278c:	4634      	mov	r4, r6
 800278e:	6876      	ldr	r6, [r6, #4]
 8002790:	e7b9      	b.n	8002706 <_malloc_r+0x46>
 8002792:	230c      	movs	r3, #12
 8002794:	4638      	mov	r0, r7
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	f000 f84c 	bl	8002834 <__malloc_unlock>
 800279c:	e7a1      	b.n	80026e2 <_malloc_r+0x22>
 800279e:	6025      	str	r5, [r4, #0]
 80027a0:	e7de      	b.n	8002760 <_malloc_r+0xa0>
 80027a2:	bf00      	nop
 80027a4:	200001f8 	.word	0x200001f8

080027a8 <_realloc_r>:
 80027a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ac:	4680      	mov	r8, r0
 80027ae:	4614      	mov	r4, r2
 80027b0:	460e      	mov	r6, r1
 80027b2:	b921      	cbnz	r1, 80027be <_realloc_r+0x16>
 80027b4:	4611      	mov	r1, r2
 80027b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027ba:	f7ff bf81 	b.w	80026c0 <_malloc_r>
 80027be:	b92a      	cbnz	r2, 80027cc <_realloc_r+0x24>
 80027c0:	f7ff ff16 	bl	80025f0 <_free_r>
 80027c4:	4625      	mov	r5, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027cc:	f000 f838 	bl	8002840 <_malloc_usable_size_r>
 80027d0:	4284      	cmp	r4, r0
 80027d2:	4607      	mov	r7, r0
 80027d4:	d802      	bhi.n	80027dc <_realloc_r+0x34>
 80027d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80027da:	d812      	bhi.n	8002802 <_realloc_r+0x5a>
 80027dc:	4621      	mov	r1, r4
 80027de:	4640      	mov	r0, r8
 80027e0:	f7ff ff6e 	bl	80026c0 <_malloc_r>
 80027e4:	4605      	mov	r5, r0
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d0ed      	beq.n	80027c6 <_realloc_r+0x1e>
 80027ea:	42bc      	cmp	r4, r7
 80027ec:	4622      	mov	r2, r4
 80027ee:	4631      	mov	r1, r6
 80027f0:	bf28      	it	cs
 80027f2:	463a      	movcs	r2, r7
 80027f4:	f7ff fed4 	bl	80025a0 <memcpy>
 80027f8:	4631      	mov	r1, r6
 80027fa:	4640      	mov	r0, r8
 80027fc:	f7ff fef8 	bl	80025f0 <_free_r>
 8002800:	e7e1      	b.n	80027c6 <_realloc_r+0x1e>
 8002802:	4635      	mov	r5, r6
 8002804:	e7df      	b.n	80027c6 <_realloc_r+0x1e>
	...

08002808 <_sbrk_r>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	2300      	movs	r3, #0
 800280c:	4d05      	ldr	r5, [pc, #20]	; (8002824 <_sbrk_r+0x1c>)
 800280e:	4604      	mov	r4, r0
 8002810:	4608      	mov	r0, r1
 8002812:	602b      	str	r3, [r5, #0]
 8002814:	f7fe f860 	bl	80008d8 <_sbrk>
 8002818:	1c43      	adds	r3, r0, #1
 800281a:	d102      	bne.n	8002822 <_sbrk_r+0x1a>
 800281c:	682b      	ldr	r3, [r5, #0]
 800281e:	b103      	cbz	r3, 8002822 <_sbrk_r+0x1a>
 8002820:	6023      	str	r3, [r4, #0]
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	20000200 	.word	0x20000200

08002828 <__malloc_lock>:
 8002828:	4801      	ldr	r0, [pc, #4]	; (8002830 <__malloc_lock+0x8>)
 800282a:	f000 b811 	b.w	8002850 <__retarget_lock_acquire_recursive>
 800282e:	bf00      	nop
 8002830:	20000204 	.word	0x20000204

08002834 <__malloc_unlock>:
 8002834:	4801      	ldr	r0, [pc, #4]	; (800283c <__malloc_unlock+0x8>)
 8002836:	f000 b80c 	b.w	8002852 <__retarget_lock_release_recursive>
 800283a:	bf00      	nop
 800283c:	20000204 	.word	0x20000204

08002840 <_malloc_usable_size_r>:
 8002840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002844:	1f18      	subs	r0, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	bfbc      	itt	lt
 800284a:	580b      	ldrlt	r3, [r1, r0]
 800284c:	18c0      	addlt	r0, r0, r3
 800284e:	4770      	bx	lr

08002850 <__retarget_lock_acquire_recursive>:
 8002850:	4770      	bx	lr

08002852 <__retarget_lock_release_recursive>:
 8002852:	4770      	bx	lr

08002854 <_init>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr

08002860 <_fini>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr
